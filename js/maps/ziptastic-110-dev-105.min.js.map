{"version":3,"file":"../ziptastic-110-dev-105.min.js","sources":["ziptastic-110-dev-105.js"],"sourcesContent":["/**\n * Autocomplete address with Ziptastic API data.\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.Ziptastic = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { }\n\n\t/**\n\t * VARIABLES\n\t */\n\tvar _settings = {\n\t\thasJQuery: ( $ != null ),\n\t\tziptasticAPIKey: false,\n\t\tzipFields: '#billing_postcode, #shipping_postcode',\n\t\tfieldWrappers: '.woocommerce-billing-fields__field-wrapper, .woocommerce-shipping-fields__field-wrapper, .woocommerce-address-fields__field-wrapper',\n\t\tcityFields: '#billing_city, #shipping_city',\n\t\tstateFields: '#billing_state, #shipping_state',\n\t\tcountryFields: '#billing_country, #shipping_country',\n\t\tminChars: 5,\n\t}\n\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n\t};\n\n\t\n\n\t/**\n\t * Process successful zip api call and set new field values.\n\t * @param  {Element} target Element that triggered autocomplete event.\n\t * @param  {Object} data    Data returned by ziptastic.\n\t */\n\tvar processAutocomplete = function( target, data ) {\n\t\tvar wrapper = target.closest( _settings.fieldWrappers );\n\n\t\t// Bail if wrapper not found\n\t\tif ( ! wrapper ) { return; }\n\n\t\tvar city = wrapper.querySelector( _settings.cityFields ),\n\t\t\t\tstate = wrapper.querySelector( _settings.stateFields ),\n\t\t\t\tcountry = wrapper.querySelector( _settings.countryFields );\n\n\t\t// Update city value\n\t\tif ( city && city.value != data.city ) {\n\t\t\tcity.value = data.city;\n\t\t\tcity.dispatchEvent( new CustomEvent( 'change' ), { 'bubbles': true } );\n\t\t}\n\n\t\t// Update country value\n\t\tif ( country && country.value != data.country ) {\n\t\t\tif ( _settings.hasJQuery && $( country ).data( 'select2' ) ) {\n\t\t\t\t// Country is a select2 so it needs to trigger jQuery event\n\t\t\t\t$( country ).val( data.country ).trigger( 'change' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcountry.value = data.country;\n\t\t\t}\n\t\t\t\n\t\t\t// Need to dispatch native event for some external components to catch the change\n\t\t\tcountry.dispatchEvent( new CustomEvent( 'change' ), { 'bubbles': true } );\n\t\t}\n\n\t\t// Update state value\n\t\tif ( state && state.value != data.state_short ) {\n\t\t\tif ( _settings.hasJQuery && $( state ).data( 'select2' ) ) {\n\t\t\t\t// State is a select2 so it needs to trigger jQuery event\n\t\t\t\t$( state ).val( data.state_short ).trigger( 'change' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstate.value = data.state_short;\n\t\t\t}\n\n\t\t\t// Need to dispatch native event for some external components to catch the change\n\t\t\tstate.dispatchEvent( new CustomEvent( 'change' ), { 'bubbles': true } );\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Trigger ziptastic api to get zip data.\n\t * @param  {String} zip Zip or postcode.\n\t */\n\tvar triggerAutocomplete = function( target, zip ) {\n\t\t// Bail if api_key not defined\n\t\tif ( ! _settings.ziptasticAPIKey ) { return; }\n\t\t\n\t\tvar wrapper = target.closest( _settings.fieldWrappers );\n\t\tvar countryField = wrapper.querySelector( _settings.countryFields );\n\t\t\n\t\t// Default to US\n\t\tvar country = 'US';\n\n\t\t// Try get country from form field\n\t\tif ( countryField && countryField.value != '' ) {\n\t\t\tcountry = countryField.value;\n\t\t}\n\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', '//zip.getziptastic.com/v3/'+country+'/'+zip);\n\t\txhr.setRequestHeader('Content-Type', 'application/json');\n\t\txhr.setRequestHeader('x-key', _settings.ziptasticAPIKey);\n\t\txhr.onload = function() {\n\t\t\tif ( xhr.status === 200 ) {\n\t\t\t\tvar data = JSON.parse( xhr.responseText );\n\t\t\t\tprocessAutocomplete( target, data[0] );\n\t\t\t}\n\t\t};\n\t\txhr.send();\n\t};\n\n\t\n\n\t/**\n\t * Maybe trigger ziptastic api, check if field has enough chars.\n\t * @param  {Event} e Event data.\n\t */\n\tvar maybeTriggerAutocomplete = function( e ) {\n\t\t// Bail if api_key not defined\n\t\tif ( ! _settings.ziptasticAPIKey ) { return; }\n\n\t\t// Bail if target not defined or not focused\n\t\tif ( ! e.target || ! e.target.matches( ':focus' ) ) { return; }\n\n\t\t// Bail some keys where presses\n\t\tvar skipKeys = [\n\t\t\t9, // Tab\n\t\t\t27, // Esc\n\t\t];\n\t\tif ( e.type == 'keyup' && skipKeys.includes( e.keyCode ) ) { return; }\n\n\t\tvar value = e.target.value;\n\n\t\t// Check if field has enough chars\n\t\tif ( value.length < _settings.minChars ) { return; }\n\n\t\ttriggerAutocomplete( e.target, value );\n\t};\n\n\n\n\t/**\n\t * Handle captured keyup event and route to appropriate function.\n\t * @param  {Event} e Event data.\n\t */\n\tvar handleTriggerEvents = function( e ) {\n\t\tif ( e.target.matches( _settings.zipFields ) ) {\n\t\t\tmaybeTriggerAutocomplete( e );\n\t\t}\n\t};\n\n\n\n\t_publicMethods.init = function() {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Bail if server defined vars not found\n\t\tif ( ! window.wfcZiptasticVars ) { return; }\n\t\t\n\t\t_settings = extend( _settings, wfcZiptasticVars );\n\n\t\t// Add event listeners\n\t\twindow.addEventListener( 'keyup', handleTriggerEvents, true );\n\t\twindow.addEventListener( 'change', handleTriggerEvents, true );\n\n\t\t_hasInitialized = true;\n\t};\n\n\t\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","Ziptastic","global","this","window","triggerAutocomplete","target","zip","countryField","country","xhr","_settings","ziptasticAPIKey","closest","fieldWrappers","querySelector","countryFields","value","XMLHttpRequest","open","setRequestHeader","onload","data","city","wrapper","status","JSON","parse","responseText","cityFields","state","stateFields","dispatchEvent","CustomEvent","bubbles","hasJQuery","$","val","trigger","state_short","send","handleTriggerEvents","e","matches","zipFields","type","includes","keyCode","length","minChars","jQuery","_hasInitialized","_publicMethods","extend","extended","deep","i","Object","prototype","toString","call","arguments","obj","prop","hasOwnProperty","merge","init","wfcZiptasticVars","addEventListener"],"mappings":"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"}