{"version":3,"names":[],"mappings":"","sources":["address-i18n-110-dev-116.js"],"sourcesContent":["/**\n * WooCommerce Fluid Checkout\n * \n * Address Internationalization Script\n * \n * Replaces the original WooCommerce address-i18n.js file\n * to also target address fields without a prefix of type\n * `billing_` or `shipping_`.\n */\n\n\n/*global wc_address_i18n_params */\njQuery( function( $ ) {\n\n\t// wc_address_i18n_params is required to continue, ensure the object exists\n\tif ( typeof wc_address_i18n_params === 'undefined' ) {\n\t\treturn false;\n\t}\n\n    var locale_json = wc_address_i18n_params.locale.replace( /&quot;/g, '\"' ), locale = $.parseJSON( locale_json );\n\n\tfunction field_is_required( field, is_required ) {\n\t\tif ( is_required ) {\n\t\t\tfield.find( 'label .optional' ).remove();\n\t\t\tfield.addClass( 'validate-required' );\n\n\t\t\tif ( field.find( 'label .required' ).length === 0 ) {\n\t\t\t\tfield.find( 'label' ).append(\n\t\t\t\t\t'&nbsp;<abbr class=\"required\" title=\"' +\n\t\t\t\t\twc_address_i18n_params.i18n_required_text +\n\t\t\t\t\t'\">*</abbr>'\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tfield.find( 'label .required' ).remove();\n\t\t\tfield.removeClass( 'validate-required woocommerce-invalid woocommerce-invalid-required-field' );\n\n\t\t\tif ( field.find( 'label .optional' ).length === 0 ) {\n\t\t\t\tfield.find( 'label' ).append( '&nbsp;<span class=\"optional\">(' + wc_address_i18n_params.i18n_optional_text + ')</span>' );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle locale\n\t$( document.body )\n\t\t.bind( 'country_to_state_changing', function( event, country, wrapper ) {\n\t\t\tvar thisform = wrapper, thislocale;\n\n\t\t\tif ( typeof locale[ country ] !== 'undefined' ) {\n\t\t\t\tthislocale = locale[ country ];\n\t\t\t} else {\n\t\t\t\tthislocale = locale['default'];\n\t\t\t}\n\n            // CHANGE: Add selector for address fields without prefix\n\t\t\tvar $postcodefield = thisform.find( '#postcode_field, #billing_postcode_field, #shipping_postcode_field' ),\n\t\t\t\t$cityfield     = thisform.find( '#city_field, #billing_city_field, #shipping_city_field' ),\n                $statefield    = thisform.find( '#state_field, #billing_state_field, #shipping_state_field' );\n\n\t\t\tif ( ! $postcodefield.attr( 'data-o_class' ) ) {\n\t\t\t\t$postcodefield.attr( 'data-o_class', $postcodefield.attr( 'class' ) );\n\t\t\t\t$cityfield.attr( 'data-o_class', $cityfield.attr( 'class' ) );\n\t\t\t\t$statefield.attr( 'data-o_class', $statefield.attr( 'class' ) );\n\t\t\t}\n\n            var locale_fields = $.parseJSON( wc_address_i18n_params.locale_fields );\n\n\t\t\t$.each( locale_fields, function( key, value ) {\n\n\t\t\t\tvar field       = thisform.find( value ),\n\t\t\t\t\tfieldLocale = $.extend( true, {}, locale['default'][ key ], thislocale[ key ] );\n\n\t\t\t\t// Labels.\n\t\t\t\tif ( typeof fieldLocale.label !== 'undefined' ) {\n\t\t\t\t\tfield.find( 'label' ).html( fieldLocale.label );\n\t\t\t\t}\n\n\t\t\t\t// Placeholders.\n\t\t\t\tif ( typeof fieldLocale.placeholder !== 'undefined' ) {\n\t\t\t\t\tfield.find( ':input' ).attr( 'placeholder', fieldLocale.placeholder );\n\t\t\t\t\tfield.find( ':input' ).attr( 'data-placeholder', fieldLocale.placeholder );\n\t\t\t\t\tfield.find( '.select2-selection__placeholder' ).text( fieldLocale.placeholder );\n\t\t\t\t}\n\n\t\t\t\t// Use the i18n label as a placeholder if there is no label element and no i18n placeholder.\n\t\t\t\tif (\n\t\t\t\t\ttypeof fieldLocale.placeholder === 'undefined' &&\n\t\t\t\t\ttypeof fieldLocale.label !== 'undefined' &&\n\t\t\t\t\t! field.find( 'label' ).length\n\t\t\t\t) {\n\t\t\t\t\tfield.find( ':input' ).attr( 'placeholder', fieldLocale.label );\n\t\t\t\t\tfield.find( ':input' ).attr( 'data-placeholder', fieldLocale.label );\n\t\t\t\t\tfield.find( '.select2-selection__placeholder' ).text( fieldLocale.label );\n\t\t\t\t}\n\n\t\t\t\t// Required.\n\t\t\t\tif ( typeof fieldLocale.required !== 'undefined' ) {\n\t\t\t\t\tfield_is_required( field, fieldLocale.required );\n\t\t\t\t} else {\n\t\t\t\t\tfield_is_required( field, false );\n\t\t\t\t}\n\n\t\t\t\t// Priority.\n\t\t\t\tif ( typeof fieldLocale.priority !== 'undefined' ) {\n\t\t\t\t\tfield.data( 'priority', fieldLocale.priority );\n\t\t\t\t}\n\n                // Hidden fields.\n\t\t\t\tif ( 'state' !== key ) {\n\t\t\t\t\tif ( typeof fieldLocale.hidden !== 'undefined' && true === fieldLocale.hidden ) {\n\t\t\t\t\t\tfield.hide().find( ':input' ).val( '' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfield.show();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Class changes.\n\t\t\t\tfield.removeClass( 'form-row-first form-row-last form-row-wide' );\n\t\t\t\tfield.addClass( fieldLocale.class.join( ' ' ) );\n\t\t\t});\n\n\t\t\tvar fieldsets = $(\n\t\t\t\t'.woocommerce-billing-fields__field-wrapper,' +\n\t\t\t\t'.woocommerce-shipping-fields__field-wrapper,' +\n\t\t\t\t'.woocommerce-address-fields__field-wrapper,' +\n\t\t\t\t'.woocommerce-additional-fields__field-wrapper .woocommerce-account-fields'\n\t\t\t);\n\n\t\t\tfieldsets.each( function( index, fieldset ) {\n\t\t\t\tvar rows    = $( fieldset ).find( '.form-row' );\n\t\t\t\tvar wrapper = rows.first().parent();\n\n\t\t\t\t// Before sorting, ensure all fields have a priority for bW compatibility.\n\t\t\t\tvar last_priority = 0;\n\n\t\t\t\trows.each( function() {\n\t\t\t\t\tif ( ! $( this ).data( 'priority' ) ) {\n\t\t\t\t\t\t\t$( this ).data( 'priority', last_priority + 1 );\n\t\t\t\t\t}\n\t\t\t\t\tlast_priority = $( this ).data( 'priority' );\n\t\t\t\t} );\n\n\t\t\t\t// Sort the fields.\n\t\t\t\trows.sort( function( a, b ) {\n\t\t\t\t\tvar asort = parseInt( $( a ).data( 'priority' ), 10 ),\n\t\t\t\t\t\tbsort = parseInt( $( b ).data( 'priority' ), 10 );\n\n\t\t\t\t\tif ( asort > bsort ) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ( asort < bsort ) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\trows.detach().appendTo( wrapper );\n\t\t\t});\n\t\t})\n\t\t.trigger( 'wc_address_i18n_ready' );\n});\n"],"file":"../address-i18n-110-dev-116.min.js"}