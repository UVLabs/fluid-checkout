{"version":3,"file":"../google-address-autocomplete-110-dev-118.min.js","sources":["google-address-autocomplete-110-dev-118.js"],"sourcesContent":["/**\n * Manage the Google Address suggestions and autocomplete address fields\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.GoogleAddressAutocomplete = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasJQuery = ( $ != null );\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { };\n\tvar _settings = {\n\t\tbodyClass: 'has-google-autocomplete',\n\n\t\tautocompleteInputSelector: '#address_1, #shipping_address_1, #billing_address_1',\n\t\taddressGroupSelector: '.woocommerce-shipping-fields, .woocommerce-billing-fields', // TODO: add group selector for address in account pages\n\t\tselect2Selector: '[class*=\"select2\"]',\n\t\taddressFieldsSelector: 'input, select, textarea',\n\t\taddressFieldsDontCleanSelector: '[name$=\"_address_id\"], #shipping_address_save, #billing_address_save',\n\t\t\n\t\tautocompleteDefaultOptions: {\n\t\t\tfields: [ 'address_components' ],\n\t\t\ttypes: [ 'address' ],\n\t\t},\n\t\t\n\t\tcomponentRestrictions: {},\n\t\t\n\t\t// Keys based on component names from Google Place data\n\t\tcomponentValueType: {\n\t\t\tstreet_number: 'short_name',\n\t\t\troute: 'long_name',\n\t\t\tlocality: 'long_name',\n\t\t\tadministrative_area_level_1: 'short_name',\n\t\t\tcountry: 'short_name',\n\t\t\tpostal_code: 'short_name',\n\t\t},\n\t\t\n\t\t// TODO: Need to set different address_components combination for each country, similar to WC locales\n\t\t// Keys based on WooCommerce forms field ids, values based on component names froom Google Place data\n\t\tfieldIdComponent: {\n\t\t\tdefault: {\n\t\t\t\tcountry: 'country',\n\t\t\t\tpostcode: 'postal_code',\n\t\t\t\tstate: 'administrative_area_level_1',\n\t\t\t\tcity: 'locality',\n\t\t\t\taddress_1: [ 'street_number', 'route' ],\n\t\t\t\tcomponents_separator: ' ',\n\t\t\t},\n\t\t\tBR: {\n\t\t\t\tcity: 'administrative_area_level_2',\n\t\t\t\taddress_1: [ 'route', 'street_number' ],\n\t\t\t\tcomponents_separator: ', ',\n\t\t\t}\n\t\t},\n\n\t};\n\tvar _updateCheckout = true;\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n    };\n\n\n\n\t/**\n\t * Set address field value.\n\t *\n\t * @param   {HTMLElement}    field  Form field.\n\t * @param   {Object}         value  Value to set for the form field.\n\t */\n\tvar setFieldValue = function( field, value ) {\n\t\t// Bail if field not provided\n\t\tif ( ! field ) { return; }\n\t\t\n\t\t// Sanitize value\n\t\tvalue = value == undefined || value == null ? '' : value;\n\n\t\t// Set field value\n\t\tfield.value = value;\n\n\t\t// Set field value for select2 fields\n\t\tif ( _hasJQuery && field.matches( _settings.select2Selector ) ) {\n\t\t\t$( field ).val( value );\n\t\t\t$( field ).select2().trigger( 'change' );\n\t\t}\n\n\t\t// Clear validation status\n\t\tif ( window.CheckoutValidation ) {\n\t\t\tCheckoutValidation.clearValidationResults( field, field.closest( _settings.formRowSelector ) );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Clear address form fields\n\t * \n\t * @param   {HTMLElement}    groupElement  Element containing the address form field.\n\t */\n\tvar cleanAddressFields = function( groupElement ) {\n\t\t// Bail if address book element not passed\n\t\tif ( ! groupElement ) { return; }\n\n\t\t_updateCheckout = false;\n\n\t\tvar fields = groupElement.querySelectorAll( _settings.addressFieldsSelector );\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\tvar field = fields[i];\n\t\t\t\n\t\t\t// Skip address id fields\n\t\t\tif ( ! field.matches( _settings.addressFieldsDontCleanSelector ) ) {\n\t\t\t\tsetFieldValue( field, '' );\n\t\t\t}\n\t\t}\n\t\t\n\t\t_updateCheckout = true;\n\t}\n\n\n\n\t/**\n\t * Get the value for an address field from the Google Place data based on the locale.\n\t *\n\t * @param   {Object}  place    Google Place data\n\t * @param   {string}  fieldId  Form field id to get data for.\n\t * @param\t{string}  locale   Country code of the locale.\n\t *\n\t * @return  {string}           Localized value for the form field.\n\t */\n\tvar getAddressComponentValue = function( place, fieldId, locale ) {\n\t\t// Bail if place does not have address components\n\t\tif ( ! place || ! place.address_components ) { return; }\n\n\t\tvar values = [];\n\t\t\n\t\t// Get `fieldComponents` as an Array\n\t\tvar fieldComponents = _settings.fieldIdComponent.default[ fieldId ];\n\t\tif ( ! Array.isArray( fieldComponents ) ) { fieldComponents = [ fieldComponents ]; }\n\t\t\n\t\tplace.address_components.forEach( function( component ) {\n\t\t\tvar fieldType = component.types[0];\n\t\t\t\n\t\t\tif ( fieldComponents.includes( fieldType ) ) {\n\t\t\t\tvar fieldValue = component[ _settings.componentValueType[ fieldType ] ];\n\t\t\t\tvalues.push( fieldValue );\n\t\t\t}\n\t\t\t\n\t\t} );\n\n\t\t// TODO: Get correct field components order based on locale, such as \"number + street\" vs \"street + number\"\n\t\t\n\t\treturn values.join( ' ' );\n\t}\n\n\n\n\t/**\n\t * Fill address form field values for a place from Google Place API.\n\t *\n\t * @param   {Object}                           place         Google Place data.\n\t * @param   {HTMLElement}                      input         Address lookup for field element.\n\t * @param   {google.maps.places.Autocomplete}  autocomplete  Google Maps Autocomplete object.\n\t */\n\tvar fillAddressFields = function( place, input, autocomplete ) {\n\t\t\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\t\t\n\t\tcleanAddressFields( groupElement );\n\n\t\t// Set country field\n\t\tvar countryValue = getAddressComponentValue( place, 'country' );\n\t\tvar countryField = groupElement.querySelector( '[id$=\"country\"]' );\n\t\tsetFieldValue( countryField, countryValue );\n\n\t\t// Bail and clean fields if country not allowed\n\t\tif ( countryField.value !== countryValue ) {\n\t\t\t// TODO: Display message telling user the country is not available\n\t\t\tcleanAddressFields( groupElement );\n\t\t\treturn;\n\t\t}\n\n\t\t// Set other fields\n\t\tvar fieldIds = Object.getOwnPropertyNames( _settings.fieldIdComponent.default );\n\t\tfor ( var i = 0; i < fieldIds.length; i++ ) {\n\t\t\tvar fieldId = fieldIds[ i ];\n\t\t\t\n\t\t\t// Skip country field\n\t\t\tif ( fieldId == 'country' ) { continue; }\n\n\t\t\t// Set field value\n\t\t\tvar value = getAddressComponentValue( place, fieldId );\n\t\t\tvar field = groupElement.querySelector( '[id$=\"'+fieldId+'\"]' );\n\t\t\tsetFieldValue( field, value );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for an address lookup field.\n\t *\n\t * @param   {HTMLElement}  input  Address lookup for field element.\n\t */\n\tvar initField = function( input ) {\n\t\t// Maybe set country restrictions\n\t\tif ( _settings.componentRestrictions.hasOwnProperty( input.id ) ) {\n\t\t\tvar inputComponentsRestrictions = _settings.componentRestrictions[ input.id ];\n\t\t\t_settings.autocompleteDefaultOptions.componentRestrictions = inputComponentsRestrictions;\n\t\t}\n\t\t\n\t\tvar autocomplete = new google.maps.places.Autocomplete( input, _settings.autocompleteDefaultOptions );\n\t\tvar onPlaceChange = function() {\n\t\t\tvar place = autocomplete.getPlace();\n\t\n\t\t\t// Check if user selected an address\n\t\t\tif ( place.address_components ) {\n\t\t\t\tfillAddressFields( place, input, autocomplete );\n\t\t\t}\n\t\t}\n\t\tautocomplete.addListener( 'place_changed', onPlaceChange );\n\t}\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for all address lookup fields.\n\t */\n\tvar initFields = function() {\n\t\tvar inputs = document.querySelectorAll( _settings.autocompleteInputSelector );\n\t\tinputs.forEach( initField );\n\t}\n\t\n\n\t/**\n\t * Initialize component and set related handlers.\n\t * \n\t * @param   {Object}   options  Pass different settings values for initializing this component.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t_settings = extend( _settings, options );\n\t\t\n\t\tinitFields();\n\t\t// TODO: Initialize fields after updated_checkout event to re-initialize address complete on billing field because the content element is replaced entirely\n\n\t\t// Finish initialization\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\t\t_hasInitialized = true;\n\t};\n\n\n\t\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","GoogleAddressAutocomplete","global","this","window","setFieldValue","field","value","undefined","_hasJQuery","matches","_settings","select2Selector","$","val","select2","trigger","CheckoutValidation","clearValidationResults","closest","formRowSelector","cleanAddressFields","groupElement","_updateCheckout","fields","querySelectorAll","addressFieldsSelector","i","length","addressFieldsDontCleanSelector","getAddressComponentValue","place","fieldId","locale","address_components","values","fieldComponents","fieldIdComponent","default","Array","isArray","forEach","component","fieldValue","fieldType","types","includes","componentValueType","push","join","initField","input","inputComponentsRestrictions","componentRestrictions","hasOwnProperty","id","autocompleteDefaultOptions","autocomplete","google","maps","places","Autocomplete","addListener","getPlace","addressGroupSelector","countryValue","countryField","querySelector","fieldIds","Object","getOwnPropertyNames","fillAddressFields","jQuery","_hasInitialized","_publicMethods","bodyClass","autocompleteInputSelector","street_number","route","locality","administrative_area_level_1","country","postal_code","postcode","state","city","address_1","components_separator","BR","extend","extended","deep","prototype","toString","call","arguments","obj","prop","merge","init","options","document","body","classList","add"],"mappings":"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"}