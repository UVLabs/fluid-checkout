{"version":3,"file":"../google-address-autocomplete-110-dev-118.min.js","sources":["google-address-autocomplete-110-dev-118.js"],"sourcesContent":["/**\n * Manage the Google Address suggestions and autocomplete address fields\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.GoogleAddressAutocomplete = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { };\n\tvar _settings = {\n\t\tbodyClass: 'has-google-autocomplete',\n\n\t\tautocompleteInputSelector: '#address_1, #shipping_address_1, #billing_address_1',\n\t\taddressGroupSelector: '.woocommerce-shipping-fields, .woocommerce-billing-fields', // TODO: add group selector for address in account pages\n\t\t\n\t\tautocompleteDefaultOptions: {\n\t\t\tfields: [ 'address_components' ],\n\t\t\ttypes: [ 'geocode' ],\n\t\t},\n\t\tcomponentRestrictions: {},\n\t\tcomponentValueType: {\n\t\t\tstreet_number: 'short_name',\n\t\t\troute: 'long_name',\n\t\t\tlocality: 'long_name',\n\t\t\tadministrative_area_level_1: 'short_name',\n\t\t\tcountry: 'short_name',\n\t\t\tpostal_code: 'short_name',\n\t\t},\n\t\t// TODO: Possibly need to set different address_components combination for each country, similar to WC locales\n\t\tfieldIdComponent: {\n\t\t\taddress_1: [ 'street_number', 'route' ],\n\t\t\tcity: 'locality',\n\t\t\tstate: 'administrative_area_level_1',\n\t\t\tcountry: 'country',\n\t\t\tpostal_code: 'postal_code',\n\t\t},\n\n\t};\n\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n    };\n\n\n\n\tvar fillAddress = function( place, input, autocomplete ) {\n\t\t\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\t\tconsole.log(place);\n\t\t\n\t\t// TODO: Clear address fields\n\t\t// TODO: Check if country is allowed for the address type\n\n\t\t// TODO: First set country value\n\t\t// TODO: Await a few milliseconds\n\n\t\t// place.address_components.forEach( function( component ) {\n\t\t// \tvar fieldType = component.types[0];\n\t\t// \tvar fieldValue = component[ _settings.componentValueType[ fieldType ] ];\n\n\t\t// \tvar fieldId = _settings.componentFieldId[ fieldType ];\n\t\t\t\n\t\t// \tif ( fieldId ) {\n\t\t// \t\t// var addressType = 'shipping'; // TODO: Get address type from groupElement\n\t\t// \t\tvar field = groupElement.querySelector( '[id$=\"'+fieldId+'\"]' );\n\t\t// \t\tfield.value = fieldValue;\n\t\n\t\t// \t\tconsole.log( fieldId + ': ' + fieldValue );\n\t\t// \t}\n\n\t\t// } );\n\t}\n\n\n\n\tvar initField = function( input ) {\n\t\t// Maybe set country restrictions\n\t\tif ( _settings.componentRestrictions.hasOwnProperty( input.id ) ) {\n\t\t\tvar inputComponentsRestrictions = _settings.componentRestrictions[ input.id ];\n\t\t\t_settings.autocompleteDefaultOptions.componentRestrictions = inputComponentsRestrictions;\n\t\t}\n\t\t\n\t\tvar autocomplete = new google.maps.places.Autocomplete( input, _settings.autocompleteDefaultOptions );\n\t\tvar onPlaceChange = function() {\n\t\t\tvar place = autocomplete.getPlace();\n\t\n\t\t\t// Check if user selected an address\n\t\t\tif ( place.address_components ) {\n\t\t\t\tfillAddress( place, input, autocomplete );\n\t\t\t}\n\t\t}\n\t\tautocomplete.addListener( 'place_changed', onPlaceChange );\n\t}\n\n\n\tvar initFields = function() {\n\t\tvar inputs = document.querySelectorAll( _settings.autocompleteInputSelector );\n\t\tinputs.forEach( initField );\n\t}\n\t\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t_settings = extend( _settings, options );\n\t\t\n\t\tinitFields();\n\t\t// TODO: Initialize fields after updated_checkout event to re-initialize address complete on billing field because the content element is replaced entirely\n\n\t\t// Finish initialization\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\t\t_hasInitialized = true;\n\t};\n\n\n\t\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","GoogleAddressAutocomplete","global","this","window","jQuery","initField","input","inputComponentsRestrictions","_settings","componentRestrictions","hasOwnProperty","id","autocompleteDefaultOptions","autocomplete","google","maps","places","Autocomplete","addListener","place","getPlace","address_components","closest","addressGroupSelector","console","log","fillAddress","_hasInitialized","_publicMethods","bodyClass","autocompleteInputSelector","fields","types","componentValueType","street_number","route","locality","administrative_area_level_1","country","postal_code","fieldIdComponent","address_1","city","state","extend","extended","deep","i","Object","prototype","toString","call","arguments","length","obj","prop","merge","init","options","document","querySelectorAll","forEach","body","classList","add"],"mappings":"CAGA,SAAWA,EAAMC,GACO,mBAAXC,QAAyBA,OAAOC,IAC3CD,OAAO,GAAID,KACmB,iBAAZG,QAClBC,OAAOD,QAAUH,IAEjBD,EAAKM,0BAA4BL,IANnC,CAQqB,oBAAXM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,gBAIzEU,OAoHQ,SAAZC,EAAsBC,GAEzB,IACKC,EADAC,EAAUC,sBAAsBC,eAAgBJ,EAAMK,MACtDJ,EAA8BC,EAAUC,sBAAuBH,EAAMK,IACzEH,EAAUI,2BAA2BH,sBAAwBF,GAG9D,IAAIM,EAAe,IAAIC,OAAOC,KAAKC,OAAOC,aAAcX,EAAOE,EAAUI,4BASzEC,EAAaK,YAAa,gBARN,WACnB,IAAIC,EAAQN,EAAaO,WAGpBD,EAAME,oBA1CK,SAAUF,EAAOb,GAEfA,EAAMgB,QAASd,EAAUe,sBAC5CC,QAAQC,IAAIN,GAwCVO,CAAaP,EAAOb,KAjIvB,IAEIqB,GAAkB,EAClBC,EAAiB,GACjBpB,EAAY,CACfqB,UAAW,0BAEXC,0BAA2B,sDAC3BP,qBAAsB,4DAEtBX,2BAA4B,CAC3BmB,OAAQ,CAAE,sBACVC,MAAO,CAAE,YAEVvB,sBAAuB,GACvBwB,mBAAoB,CACnBC,cAAe,aACfC,MAAO,YACPC,SAAU,YACVC,4BAA6B,aAC7BC,QAAS,aACTC,YAAa,cAGdC,iBAAkB,CACjBC,UAAW,CAAE,gBAAiB,SAC9BC,KAAM,WACNC,MAAO,8BACPL,QAAS,UACTC,YAAa,gBAoBXK,EAAS,WAEZ,IAAIC,EAAW,GACXC,GAAO,EACPC,EAAI,EAGgD,qBAAnDC,OAAOC,UAAUC,SAASC,KAAMC,UAAU,MAC9CN,EAAOM,UAAU,GACjBL,KAkBD,KAAOA,EAAIK,UAAUC,OAAQN,IAAK,EAdtB,SAAUO,GACrB,IAAK,IAAIC,KAAQD,EACZA,EAAI5C,eAAe6C,KAElBT,GAAsD,oBAA9CE,OAAOC,UAAUC,SAASC,KAAKG,EAAIC,IAC9CV,EAASU,GAAQX,EAAOC,EAASU,GAAOD,EAAIC,IAE5CV,EAASU,GAAQD,EAAIC,IASxBC,CADUJ,UAAUL,IAIrB,OAAOF,GAkFR,OAlBAjB,EAAe6B,KAAO,SAAUC,GAC1B/B,IAELnB,EAAYoC,EAAQpC,EAAWkD,GAXlBC,SAASC,iBAAkBpD,EAAUsB,2BAC3C+B,QAASxD,GAgBhBsD,SAASG,KAAKC,UAAUC,IAAKxD,EAAUqB,WACvCF,GAAkB,IAQZC"}