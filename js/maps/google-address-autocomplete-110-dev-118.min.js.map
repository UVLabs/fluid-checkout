{"version":3,"file":"../google-address-autocomplete-110-dev-118.min.js","sources":["google-address-autocomplete-110-dev-118.js"],"sourcesContent":["/**\n * Manage the Google Address suggestions and autocomplete address fields\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.GoogleAddressAutocomplete = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasJQuery = ( $ != null );\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { };\n\tvar _settings = {\n\t\tbodyClass: 'has-google-autocomplete',\n\n\t\tautocompleteInputSelector: '#address_1, #shipping_address_1, #billing_address_1',\n\t\tautocompleteEnabledInputSelector: '.pac-target-input',\n\t\taddressGroupSelector: '.woocommerce-shipping-fields, .woocommerce-billing-fields, .woocommerce-address-fields',\n\t\tselect2Selector: '[class*=\"select2\"]',\n\t\taddressFieldsSelector: 'input, select, textarea',\n\t\taddressFieldsDontCleanSelector: '[name$=\"_address_id\"], #shipping_address_save, #billing_address_save',\n\t\t\n\t\tautocompleteDefaultOptions: {\n\t\t\tfields: [ 'address_components' ],\n\t\t\ttypes: [ 'address' ],\n\t\t},\n\t\t\n\t\t// Set component restrictions for each address lookup field.\n\t\t//\n\t\t// Example of this accepted values:\n\t\t// allowedCountries: { `shipping_address_1: ['US','UK'], }`\n\t\tallowedCountries: { 'shipping_address_1': [ 'US' ] },\n\t\t\n\t\t// Keys based on component names from Google Place data\n\t\tcomponentValueType: {\n\t\t\tstreet_number: 'short_name',\n\t\t\troute: 'long_name',\n\t\t\tlocality: 'long_name',\n\t\t\tadministrative_area_level_1: 'short_name',\n\t\t\tadministrative_area_level_2: 'long_name',\n\t\t\tcountry: 'short_name',\n\t\t\tpostal_code: 'short_name',\n\t\t},\n\t\t\n\t\t// Keys based on WooCommerce forms field ids, values based on component names from Google Place data\n\t\t// Values for each locale defined at the server\n\t\t// @see `/inc/integration-google-address.php` at function `add_google_address_js_settings`\n\t\tlocaleComponents: {\n\t\t\tdefault: { // Default to US settings\n\t\t\t\tcountry: 'country',\n\t\t\t\tpostcode: 'postal_code',\n\t\t\t\tstate: 'administrative_area_level_1',\n\t\t\t\tcity: 'locality',\n\t\t\t\taddress_1: [ 'street_number', 'route' ],\n\t\t\t\tcomponents_separator: ' ',\n\t\t\t},\n\t\t},\n\n\t};\n\tvar _updateCheckout = true;\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n    };\n\n\n\n\t/**\n\t * Set address field value.\n\t *\n\t * @param   {HTMLElement}    field  Form field.\n\t * @param   {Object}         value  Value to set for the form field.\n\t */\n\tvar setFieldValue = function( field, value ) {\n\t\t// Bail if field not provided\n\t\tif ( ! field ) { return; }\n\t\t\n\t\t// Sanitize value\n\t\tvalue = value == undefined || value == null ? '' : value;\n\n\t\t// Set field value\n\t\tfield.value = value;\n\n\t\t// Set field value for select2 fields\n\t\tif ( _hasJQuery && field.matches( _settings.select2Selector ) ) {\n\t\t\t$( field ).val( value );\n\t\t\t$( field ).select2().trigger( 'change' );\n\t\t}\n\n\t\t// Clear validation status\n\t\tif ( window.CheckoutValidation ) {\n\t\t\tCheckoutValidation.clearValidationResults( field, field.closest( _settings.formRowSelector ) );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Clear address form fields\n\t * \n\t * @param   {HTMLElement}    groupElement  Element containing the address form field.\n\t */\n\tvar cleanAddressFields = function( groupElement ) {\n\t\t// Bail if address book element not passed\n\t\tif ( ! groupElement ) { return; }\n\n\t\t_updateCheckout = false;\n\n\t\tvar fields = groupElement.querySelectorAll( _settings.addressFieldsSelector );\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\tvar field = fields[i];\n\t\t\t\n\t\t\t// Skip address id fields\n\t\t\tif ( ! field.matches( _settings.addressFieldsDontCleanSelector ) ) {\n\t\t\t\tsetFieldValue( field, '' );\n\t\t\t}\n\t\t}\n\t\t\n\t\t_updateCheckout = true;\n\t}\n\n\n\n\t/**\n\t * Get country locale settings for address fields from Google Place data.\n\t *\n\t * @param   {string}  countryCode  Country code to get locale settings for.\n\t *\n\t * @return  {Object}               Full locale settings for the country.\n\t */\n\tvar getLocale = function( countryCode ) {\n\t\tvar locale = _settings.localeComponents.default;\n\n\t\t// Get full locale settings for the country\n\t\tif ( countryCode != null && _settings.localeComponents.hasOwnProperty( countryCode.toUpperCase() ) ) {\n\t\t\tlocale = extend( locale, _settings.localeComponents[ countryCode.toUpperCase() ] );\n\t\t}\n\n\t\treturn locale;\n\t}\n\n\n\n\t/**\n\t * Get the value for an address field from the Google Place data based on the locale.\n\t *\n\t * @param   {string}  fieldId  Form field id to get data for.\n\t * @param   {Object}  place    Google Place data\n\t * @param\t{string}  locale   Country code of the locale.\n\t *\n\t * @return  {string}           Localized value for the form field.\n\t */\n\tvar getFieldValueFromPlace = function( fieldId, place, locale ) {\n\t\t\n\t\t// Bail if place does not have address components\n\t\tif ( ! place || ! place.address_components ) { return; }\n\n\t\tvar values = [];\n\t\t\n\t\t// Get default locale if not passed in\n\t\tif ( ! locale ) {\n\t\t\tlocale = _settings.localeComponents.default;\n\t\t}\n\t\t\n\t\t// Get `fieldComponents` as an Array\n\t\tvar fieldComponents = locale[ fieldId ];\n\t\tif ( ! Array.isArray( fieldComponents ) ) { fieldComponents = [ fieldComponents ]; }\n\t\t\n\t\tfieldComponents.forEach( function( fieldComponent ) {\n\t\t\tfor ( var i = 0; i < place.address_components.length; i++ ) {\n\t\t\t\tvar component = place.address_components[ i ];\n\t\t\t\tvar fieldType = component.types[0];\n\t\t\t\t\n\t\t\t\tif ( fieldComponent == fieldType ) {\n\t\t\t\t\tvar fieldValue = component[ _settings.componentValueType[ fieldType ] ];\n\t\t\t\t\tvalues.push( fieldValue );\n\t\t\t\t\tbreak; // Exit place address components iteration when value is found\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\t\n\t\treturn values.join( locale.components_separator );\n\t}\n\n\n\n\t/**\n\t * Get the allowed countries for an Address Autocomplete lookup field.\n\t *\n\t * @param   {HTMLElement}   input   Address lookup field element.\n\t *\n\t * @return  {Array}                 A list of countries allowed for the address lookup input field. `Null` on error getting the values.\n\t */\n\tvar getAllowedCountriesForInput = function( input ) {\n\t\t// Bail if input not valid or group element not available\n\t\tif ( ! input || ! input.closest( _settings.addressGroupSelector ) ) { return; }\n\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\t\tvar countryOptions = groupElement.querySelectorAll( '[id$=\"country\"] option' );\n\n\t\t// Get allowed country codes\n\t\tvar allowedCountries = [];\n\t\tfor ( var i = 0; i < countryOptions.length; i++ ) {\n\t\t\tvar option = countryOptions[i];\n\t\t\tif ( option.value != '' ) { allowedCountries.push( option.value ); }\n\t\t}\n\n\t\treturn allowedCountries;\n\t}\n\n\n\n\t/**\n\t * Fill address form field values for a place from Google Place API.\n\t *\n\t * @param   {Object}                           place         Google Place data.\n\t * @param   {HTMLElement}                      input         Address lookup field element.\n\t * @param   {google.maps.places.Autocomplete}  autocomplete  Google Maps Autocomplete object.\n\t */\n\tvar fillAddressFields = function( place, input, autocomplete ) {\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\n\t\tconsole.log( place.address_components );\n\t\t\n\t\tcleanAddressFields( groupElement );\n\t\t\n\t\t// Set country field\n\t\tvar countryValue = getFieldValueFromPlace( 'country', place );\n\t\tvar countryField = groupElement.querySelector( '[id$=\"country\"]' );\n\t\tsetFieldValue( countryField, countryValue );\n\n\t\t// Bail and clean fields if country not allowed\n\t\tif ( countryField.value !== countryValue ) {\n\t\t\tcleanAddressFields( groupElement );\n\t\t\t\n\t\t\t// TODO: Display message telling user the country is not available\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Set other fields\n\t\tvar locale = getLocale( countryValue );\n\t\tvar fieldIds = Object.getOwnPropertyNames( locale );\n\t\tfor ( var i = 0; i < fieldIds.length; i++ ) {\n\t\t\tvar fieldId = fieldIds[ i ];\n\t\t\t\n\t\t\t// Skip country field\n\t\t\tif ( fieldId == 'country' ) { continue; }\n\n\t\t\t// Set field value\n\t\t\tvar value = getFieldValueFromPlace( fieldId, place, locale );\n\t\t\tvar field = groupElement.querySelector( '[id$=\"'+fieldId+'\"]' );\n\t\t\t\n\t\t\t// Set state field to uppercase to match values from WooCommerce\n\t\t\tif ( fieldId == 'state' ) { value = value.toUpperCase(); }\n\n\t\t\tsetFieldValue( field, value );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Effectively disable the browser autocomplete feature by changing the input `autocomplete` attribute to a random value.\n\t *\n\t * @param   {HTMLElement}  input  Input field to disable the browser autocomplete feature.\n\t */\n\tvar disableBrowserAutocomplete = function( input ) {\n\t\t// Bail if input is invalid\n\t\tif ( ! input ) { return; }\n\n\t\tinput.setAttribute( 'autocomplete', 'off-' + Date.now() );\n\t}\n\n\t/**\n\t * Restore the browser autocomplete feature by changing the input `autocomplete` attribute to its original value.\n\t *\n\t * @param   {HTMLElement}  input  Input field to restore the browser autocomplete feature.\n\t */\n\tvar restoreAutocompleteAttr = function( input ) {\n\t\t// Bail if input is invalid\n\t\tif ( ! input ) { return; }\n\n\t\tinput.setAttribute( 'autocomplete', input.getAttribute( 'data-o-autocomplete' ) );\n\t}\n\n\t/**\n\t * Maybe restore the browser autocomplete feature.\n\t *\n\t * @param   {HTMLElement}  input  Input field to restore the browser autocomplete feature.\n\t */\n\tvar maybeRestoreAutocompleteAttr = function( input ) {\n\t\t// Bail if input is invalid of already restored\n\t\tif ( ! input || input.getAttribute( 'autocomplete' ) != 'off' ) { return; }\n\n\t\trestoreAutocompleteAttr( input );\n\t}\n\n\n\t/**\n\t * Prevent form submit when `Enter` key is pressed to select an address suggestion.\n\t *\n\t * @param   {Event}   e  Keydown event.\n\t *\n\t * @return  {Boolean}    Return `false` to prevent event to complete execution, nothing otherwise.\n\t */\n\tvar maybePreventFormSubmit = function( e ) {\n\t\t// Prevent form submit when `Enter` key is pressed to select an address suggestion\n\t\tif ( e.key == 'Enter' || e.which == 13 ) {\n\t\t\te.preventDefault();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for an address lookup field.\n\t *\n\t * @param   {HTMLElement}  input  Address lookup field element.\n\t */\n\tvar initField = function( input ) {\n\t\t// Bail if input invalid or already initialized\n\t\tif ( ! input || input.matches( _settings.autocompleteEnabledInputSelector ) ) { return; }\n\n\t\t// Get autocomplete options\n\t\tvar autocompleteOptions = extend( true, [], _settings.autocompleteDefaultOptions ); // Clone options object\n\t\tvar allowedCountriesList;\n\t\t\n\t\t// Try get allowed countries from settings\n\t\tif ( _settings.allowedCountries.hasOwnProperty( input.id ) ) {\n\t\t\tallowedCountriesList = _settings.allowedCountries[ input.id ];\n\t\t}\n\t\t// Try get/set allowed countries from country select field options\n\t\telse {\n\t\t\tallowedCountriesList = getAllowedCountriesForInput( input );\n\t\t\tif ( allowedCountriesList.length > 5 ) {\n\t\t\t\tallowedCountriesList = null;\n\t\t\t}\n\t\t}\n\n\t\t// Maybe set country restrictions\n\t\tif ( Array.isArray( allowedCountriesList ) ) {\n\t\t\tautocompleteOptions[ 'componentRestrictions' ] = { country: allowedCountriesList };\n\t\t}\n\t\t\n\t\t// Get/Set original value of the `autocomplete` attribute\n\t\tinput.setAttribute( 'data-o-autocomplete', input.getAttribute( 'autocomplete' ) );\n\n\t\t// Initialze Google Places Autocomplete\n\t\tvar autocomplete = new google.maps.places.Autocomplete( input, autocompleteOptions );\n\t\tvar onPlaceChange = function() {\n\t\t\tvar place = autocomplete.getPlace();\n\t\n\t\t\t// Check if user selected an address\n\t\t\tif ( place.address_components ) {\n\t\t\t\tfillAddressFields( place, input, autocomplete );\n\t\t\t}\n\t\t}\n\n\t\t// Set event handler for suggestion selected/changed\n\t\tautocomplete.addListener( 'place_changed', onPlaceChange );\n\n\t\t// Attempt to disable browser autocomplete for the input field.\n\t\t// This is a hacky way to restore autocomplete values after initializing the Google Places Autocomplete component,\n\t\t// a better approach would be to listen to an event from the API but at the time of making this the only event\n\t\t// available is `place_changed` which won't work for this purpoose\n\t\t// @see https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 1000 );\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 2000 );\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 5000 );\n\t}\n\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for all address lookup fields.\n\t */\n\tvar initFields = function() {\n\t\tvar inputs = document.querySelectorAll( _settings.autocompleteInputSelector );\n\t\tinputs.forEach( initField );\n\t}\n\n\n\n\t/**\n\t * Handle captured `focus` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Event dispatched. Usually `focus` or `focusin`.\n\t */\n\tvar handleFocus = function( e ) {\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\tdisableBrowserAutocomplete( e.target );\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * Handle captured `blur` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Event dispatched. Usually `blur` or `focusout`.\n\t */\n\tvar handleBlur = function( e ) {\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\trestoreAutocompleteAttr( e.target );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Handle captured `keydown` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Keydown event dispatched.\n\t */\n\tvar handleKeydown = function( e ) {\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\tmaybePreventFormSubmit( e );\n\t\t}\n\t}\n\t\n\t\n\n\t/**\n\t * Initialize component and set related handlers.\n\t * \n\t * @param   {Object}   options  Pass different settings values for initializing this component.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Try to get options from the plugin settings JS object\n\t\tif ( ! options && window.wfcSettings && window.wfcSettings.googleAutoCompleteSettings ) {\n\t\t\toptions = window.wfcSettings.googleAutoCompleteSettings;\n\t\t}\n\n\t\t// Merge settings\n\t\t_settings = extend( true, _settings, options );\n\n\t\t// Initialize address autocomplete fields\n\t\tinitFields();\n\t\tif ( _hasJQuery ) {\n\t\t\t// Initialize address fields after `updated_checkout` to reinitialize\n\t\t\t// billing address complete field\n\t\t\t$( document.body ).on( 'updated_checkout', initFields );\n\t\t}\n\n\t\t// Add event listeners\n\t\twindow.addEventListener( 'focusin', handleFocus );\n\t\twindow.addEventListener( 'focusout', handleBlur );\n\t\twindow.addEventListener( 'keydown', handleKeydown, true );\n\t\t\t\n\t\t// Finish initialization\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\t\t_hasInitialized = true;\n\t};\n\n\n\t\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","GoogleAddressAutocomplete","global","this","window","setFieldValue","field","value","undefined","_hasJQuery","matches","_settings","select2Selector","$","val","select2","trigger","CheckoutValidation","clearValidationResults","closest","formRowSelector","cleanAddressFields","groupElement","_updateCheckout","fields","querySelectorAll","addressFieldsSelector","i","length","addressFieldsDontCleanSelector","getFieldValueFromPlace","fieldId","place","locale","address_components","values","fieldComponents","localeComponents","default","Array","isArray","forEach","fieldComponent","component","fieldType","types","fieldValue","componentValueType","push","join","components_separator","fillAddressFields","input","autocomplete","addressGroupSelector","console","log","countryValue","countryField","querySelector","countryCode","hasOwnProperty","toUpperCase","extend","fieldIds","Object","getOwnPropertyNames","restoreAutocompleteAttr","setAttribute","getAttribute","maybeRestoreAutocompleteAttr","initField","autocompleteOptions","allowedCountriesList","autocompleteEnabledInputSelector","autocompleteDefaultOptions","allowedCountries","id","countryOptions","option","getAllowedCountriesForInput","country","google","maps","places","Autocomplete","addListener","getPlace","setTimeout","initFields","document","autocompleteInputSelector","handleFocus","e","target","Date","now","handleBlur","handleKeydown","key","which","preventDefault","maybePreventFormSubmit","jQuery","_hasInitialized","_publicMethods","bodyClass","shipping_address_1","street_number","route","locality","administrative_area_level_1","administrative_area_level_2","postal_code","postcode","state","city","address_1","extended","deep","prototype","toString","call","arguments","obj","prop","merge","init","options","wfcSettings","googleAutoCompleteSettings","body","on","addEventListener","classList","add"],"mappings":"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"}