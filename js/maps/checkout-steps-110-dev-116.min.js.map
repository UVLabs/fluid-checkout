{"version":3,"names":[],"mappings":"","sources":["checkout-steps-110-dev-116.js"],"sourcesContent":["/**\n * Manage checkout steps state.\n *\n * DEPENDS ON:\n * - jQuery // Interact with WooCommerce events\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.CheckoutSteps = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { };\n\tvar _settings = {\n\t\tbodyClass: 'wfc-checkout-steps--active',\n\t\tactiveStepBodyClassPattern: 'wfc-checkout-step--active-{ID}',\n\n\t\twrapperSelector: '#wfc-wrapper',\n\t\twrapperInsideSelector: '.wfc-inside',\n\t\ttargetWrapperAttribute: 'data-target',\n\t\t\n\t\tprogressBarSelector: '#wfc-progressbar',\n\t\tprogressBarStepSelector: '.wfc-progress-bar-step',\n\t\tprogressBarStepClass: 'wfc-progress-bar-step',\n\t\tprogressBarStepDoneClass: 'done',\n\t\tprogressBarStepCurrentClass: 'current',\n\n\t\tstepIdPattern: 'step-{ID}',\n\t\tstepIdSelector: '.wfc-progress-bar-step[data-step-index]',\n\t\tstepButtonSelector: '.wfc-step-button',\n\t\tstepSelector: '.wfc-progress-bar-step[data-step-index=\"{ID}\"]',\n\t\tstepIndexAttribute: 'data-step-index',\n\t\tstepIdAttribute: 'data-step-id',\n\t\tstepNavigationPrevSelector: '.wfc-prev',\n\t\tstepNavigationNextSelector: '.wfc-next',\n\n\t\tframeIdAttribute: 'data-frame-id',\n\t\tframeIdPattern: 'step-frame-{ID}',\n\t\tframeIdSelectorPattern: '#step-frame-{ID}',\n\t\tframeSelector: '.wfc-frame[data-step-index=\"{ID}\"]',\n\n\t\twoocommerceInvalidFieldClass: '.woocommerce-invalid',\n\n\t\ttopScrollOffset: 100,\n\n\t\tstates: {\n\t\t\tACTIVE: 'active',\n\t\t\tDISABLED: 'disabled',\n\t\t}\n\t}\n\n\tvar _wfcWrapper,\n\t\t_wfcInner,\n\t\t_progressBar,\n\t\t_frames,\n\t\t_steps;\n\n\n\n\t/**\n\t * METHODS\n\t */\n\t\n\t/**\n\t * Get the id of current step.\n\t */\n\tvar getFirstStepIndex = function() {\n\t\t// Return next available step\n\t\tfor ( var i = 0; i < _frames.length; i++ ) {\n\t\t\tif ( ! _frames[ i + 1 ].hasAttribute( _settings.states.DISABLED ) ) {\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Get the id of current step.\n\t */\n\tvar getCurrentStepIndex = function() {\n\t\tvar currentStep = document.querySelector( '.wfc-progress-bar-step.current' );\n\t\treturn currentStep ? parseInt( currentStep.getAttribute( _settings.stepIndexAttribute ) ) : null;\n\t};\n\n\n\n\t/**\n\t * Get the id of previous available step.\n\t */\n\tvar getPrevStepId = function() {\n\t\tvar currentStepIndex = getCurrentStepIndex();\n\n\t\t// Get first enabled step if not step is active\n\t\tif ( ! currentStepIndex ) {\n\t\t\treturn getFirstStepIndex();\n\t\t}\n\n\t\t// Return next available step\n\t\tfor ( var i = currentStepIndex - 1; i >= 0; i-- ) {\n\t\t\tif ( ! _frames[ i - 1 ].hasAttribute( _settings.states.DISABLED ) ) {\n\t\t\t\treturn currentStepIndex - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t};\n\n\n\n\t/**\n\t * Get the id of next available step.\n\t */\n\tvar getNextStepIndex = function() {\n\t\tvar currentStepIndex = getCurrentStepIndex();\n\n\t\t// Get first enabled step if not step is active\n\t\tif ( ! currentStepIndex ) {\n\t\t\treturn getFirstStepIndex();\n\t\t}\n\n\t\t// Return next available step\n\t\tfor ( var i = currentStepIndex - 1; i < _frames.length; i++ ) {\n\t\t\tif ( ! _frames[ i + 1 ].hasAttribute( _settings.states.DISABLED ) ) {\n\t\t\t\treturn currentStepIndex + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\n\n\t/**\n\t * Clear all step status\n\t */\n\tvar clearStepStatus = function() {\n\t\tfor ( var i = _frames.length - 1; i >= 0; i-- ) {\n\t\t\t// active\n\t\t\t_frames[i].classList.remove( _settings.progressBarStepCurrentClass );\n\t\t\t_steps[i].classList.remove( _settings.progressBarStepCurrentClass );\n\t\t\tdocument.body.classList.remove( _settings.activeStepBodyClassPattern.replace( '{ID}', _frames[i].getAttribute( _settings.frameIdAttribute ) ) );\n\t\t\t\n\t\t\t// done\n\t\t\tif ( ! _steps[i].hasAttribute( _settings.states.DISABLED ) ) {\n\t\t\t\t_steps[i].classList.remove( _settings.progressBarStepDoneClass );\n\t\t\t}\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Mark steps as done.\n\t */\n\tvar markStepsDone = function() {\n\t\tvar currentStepIndex = getCurrentStepIndex();\n\t\tfor ( var i = _steps.length - 1; i >= 0; i-- ) {\n\t\t\tvar stepId = _steps[i].getAttribute( _settings.stepIndexAttribute );\n\t\t\tif ( ! _steps[i].hasAttribute( _settings.states.DISABLED ) && stepId < currentStepIndex ) {\n\t\t\t\t_steps[i].classList.add( _settings.progressBarStepDoneClass );\n\t\t\t}\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Mark step as current.\n\t */\n\tvar markStepActive = function( step, frame, scrollToElement ) {\n\t\t// Set step as current\n\t\tstep.classList.add( _settings.progressBarStepCurrentClass );\n\t\tframe.classList.add( _settings.progressBarStepCurrentClass );\n\t\tdocument.body.classList.add( _settings.activeStepBodyClassPattern.replace( '{ID}', frame.getAttribute( _settings.frameIdAttribute ) ) );\n\n\t\t// TODO: Better animation handling with slide left/right depending on the position of the step\n\t\t\n\t\t// Maybe scroll step into view\n\t\tif ( scrollToElement ) {\n\t\t\tif ( frame ) {\n\t\t\t\tscrollTo( frame );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tscrollTo( _progressBar );\n\t\t\t}\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Change current step.\n\t */\n\tvar setCurrentStep = function( stepIndex, scrollToElement ) {\n\t\tvar currentStepIndex = getCurrentStepIndex();\n\n\t\t// Bail if is current active step\n\t\tif ( currentStepIndex && currentStepIndex == stepIndex ) { return; }\n\t\t\n\t\tvar\tstep = document.querySelector( _settings.stepSelector.replace( '{ID}', stepIndex ) ),\n\t\t\tframe = document.querySelector( _settings.frameSelector.replace( '{ID}', stepIndex ) );\n\n\t\t// Clear step status, mark as active and done\n\t\tclearStepStatus();\n\t\tmarkStepActive( step, frame, scrollToElement );\n\t\tmarkStepsDone();\n\t};\n\n\n\n\t/**\n\t * Create progress bar steps.\n\t */\n\tvar initSteps = function() {\n\n\t\t// Clear progress bar placeholders\n\t\twhile ( _progressBar.firstChild ) {\n\t\t\t_progressBar.removeChild( _progressBar.firstChild );\n\t\t}\n\n\t\t// Get frames\n\t\t_frames = document.querySelectorAll( '.wfc-frame' );\n\n\t\t// Add ID to each frame and steps on progress bar\n\t\tfor ( var i = _frames.length - 1; i >= 0; i-- ) {\n\t\t\tvar index = i + 1,\n\t\t\t\tstepId = _frames[i].getAttribute( _settings.stepIdAttribute ),\n\t\t\t\tlabel = _frames[i].getAttribute( 'data-label' ),\n\t\t\t\tstep = document.createElement( 'div' );\n\t\t\t\n\t\t\t// Make sure stepId has a value\n\t\t\tif ( stepId == null || _frames[i].getAttribute( _settings.stepIdAttribute ) == '' ) { stepId = index; };\n\n\t\t\tstep.classList.add( _settings.progressBarStepClass );\n\t\t\tstep.setAttribute( 'id', _settings.stepIdPattern.replace( '{ID}', stepId ) );\n\t\t\tstep.setAttribute( _settings.stepIndexAttribute, index );\n\t\t\tstep.textContent = label;\n\n\t\t\tif ( _frames[i].hasAttribute( _settings.states.DISABLED ) ) {\n\t\t\t\tstep.setAttribute( _settings.states.DISABLED , _settings.states.DISABLED );\n\t\t\t}\n\n\t\t\tif ( _frames[i].classList.contains( _settings.progressBarStepDoneClass ) ) {\n\t\t\t\tstep.classList.add( _settings.progressBarStepDoneClass );\n\t\t\t}\n\n\t\t\t_progressBar.insertBefore( step, _progressBar.firstChild );\n\t\t\t\n\t\t\t_frames[i].setAttribute( 'id', _settings.frameIdPattern.replace( '{ID}', stepId ) );\n\t\t\t_frames[i].setAttribute( _settings.frameIdAttribute, stepId );\n\t\t\t_frames[i].setAttribute( _settings.stepIndexAttribute, index );\n\t\t}\n\n\t\t// Get steps\n\t\t_steps = document.querySelectorAll( _settings.progressBarStepSelector );\n\n\t\t// Show first available step\n\t\tsetCurrentStep( getNextStepIndex(), false );\n\t};\n\n\n\n\t/**\n\t * Get element offset values from page limits\n\t * \n\t * @see https://stackoverflow.com/a/442474/5732235\n\t */\n\tvar getOffset = function( el ) {\n\t\tvar _x = 0;\n\t\tvar _y = 0;\n\t\twhile( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {\n\t\t\t_x += el.offsetLeft - el.scrollLeft;\n\t\t\t_y += el.offsetTop - el.scrollTop;\n\t\t\tel = el.offsetParent;\n\t\t}\n\t\treturn { top: _y, left: _x };\n\t}\n\n\n\n\t/**\n\t * Scroll element into viewport.\n\t * @param  {Element} element Element to get position and scroll viewport to.\n\t */\n\tvar scrollTo = function( element ) {\n\t\twindow.scroll( {\n\t\t\tbehavior: 'smooth',\n\t\t\tleft: 0,\n\t\t\ttop: getOffset( element ).top - _settings.topScrollOffset\n\t\t} );\n\t};\n\n\n\t\n\t/**\n\t * Handle clicks on steps progress bar.\n\t */\n\tvar handleStepClick = function( e ) {\n\t\te.preventDefault();\n\t\tvar step = e.target.closest( _settings.stepIdSelector );\n\t\tsetCurrentStep( step.getAttribute( _settings.stepIndexAttribute ), true );\n\t};\n\n\n\n\t/**\n\t * Handle clicks on buttons that lead to a specific step.\n\t */\n\tvar handleStepButtonClick = function( e ) {\n\t\te.preventDefault();\n\t\tvar button = e.target.closest( _settings.stepButtonSelector );\n\t\tsetCurrentStep( button.getAttribute( _settings.stepIndexAttribute ), true );\n\t};\n\n\n\n\t/**\n\t * Handle clicks on next step buttons.\n\t */\n\tvar handleNextStepClick = function( e ) {\n\t\te.preventDefault();\n\n\t\t// Validate step fields\n\t\tif ( window.CheckoutValidation ) {\n\t\t\t\n\t\t\tvar currentStepIndex = getCurrentStepIndex(),\n\t\t\t\tframe = _wfcWrapper.querySelector( _settings.frameSelector.replace( '{ID}', currentStepIndex ) );\n\t\t\t\n\t\t\t// Bail if not all fields valid and stay in the same step\n\t\t\tif ( ! window.CheckoutValidation.validateAllFields( frame ) ) {\n\t\t\t\tvar element = frame.querySelector( _settings.woocommerceInvalidFieldClass );\n\t\t\t\tscrollTo( element );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Go to next step\n\t\tsetCurrentStep( getNextStepIndex(), true );\n\t};\n\n\n\n\t/**\n\t * Handle clicks on previous step buttons.\n\t */\n\tvar handlePrevStepClick = function( e ) {\n\t\te.preventDefault();\n\n\t\t// Go to prev step\n\t\tsetCurrentStep( getPrevStepId(), true );\n\t};\n\n\n\n\t/**\n\t * Handle document clicks and route to the appropriate function.\n\t */\n\tvar handleClick = function( e ) {\n\t\tif ( e.target.closest( _settings.stepIdSelector + ':not([disabled])' ) ) {\n\t\t\thandleStepClick( e );\n\t\t}\n\t\telse if ( e.target.closest( _settings.stepButtonSelector + ':not([disabled])' ) ) {\n\t\t\thandleStepButtonClick( e );\n\t\t}\n\t\telse if ( e.target.closest( _settings.stepNavigationPrevSelector + ':not([disabled])' ) ) {\n\t\t\thandlePrevStepClick( e );\n\t\t}\n\t\telse if ( e.target.closest( _settings.stepNavigationNextSelector + ':not([disabled])' ) ) {\n\t\t\thandleNextStepClick( e );\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.refreshSteps = function() {\n\t\t_wfcWrapper = document.querySelector( _settings.wrapperSelector );\n\t\t_wfcInner = document.querySelector( _settings.wrapperInsideSelector );\n\t\t_progressBar = document.querySelector( _settings.progressBarSelector );\n\n\t\t// Bail if elements not present\n\t\tif ( ! _wfcWrapper || ! _wfcInner || ! _progressBar ) { return; }\n\n\t\tinitSteps();\n\t}\n\n\n\n\t/**\n\t * Initialize component and set related handlers.\n\t */\n\t_publicMethods.init = function() {\n\t\tif ( _hasInitialized ) return;\n\n\t\t_publicMethods.refreshSteps();\n\t\t\n\t\t// Add event listeners\n\t\twindow.addEventListener( 'click', handleClick );\n\t\t$( document ).on( 'load_ajax_content_done', _publicMethods.refreshSteps );\n\n\t\t// Add init class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t_hasInitialized = true;\n\t};\n\n\n\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"file":"../checkout-steps-110-dev-116.min.js"}