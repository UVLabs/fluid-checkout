{"version":3,"file":"../google-address-autocomplete-110-dev-122.min.js","sources":["google-address-autocomplete-110-dev-122.js"],"sourcesContent":["/**\n * Manage the Google Address suggestions and autocomplete address fields\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t\tmodule.exports = factory(root);\n\t} else {\n\t\troot.GoogleAddressAutocomplete = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar $ = jQuery;\n\n\tvar _hasJQuery = ( $ != null );\n\tvar _hasInitialized = false;\n\tvar _publicMethods = { };\n\tvar _settings = {\n\t\tbodyClass: 'has-google-autocomplete',\n\n\t\tformRowSelector: '.form-row',\n\t\tselect2Selector: '[class*=\"select2\"]',\n\n\t\tautocompleteInputSelector: '#address_1, #shipping_address_1, #billing_address_1',\n\t\tautocompleteEnabledInputSelector: '.pac-target-input',\n\t\taddressGroupSelector: '.woocommerce-shipping-fields, .woocommerce-billing-fields, .woocommerce-address-fields',\n\t\taddressGroupShippingSelector: '.woocommerce-shipping-fields',\n\t\taddressGroupBillingSelector: '.woocommerce-billing-fields',\n\t\taddressFieldsSelector: '[name$=\"address_1\"], [name$=\"address_2\"], [name$=\"city\"], [name$=\"state\"], [name$=\"postcode\"], [name$=\"country\"]:not( input[type=\"hidden\"] )',\n\n\t\tgenericAddressType: 'this',\n\t\taddressTypeLabelShipping: 'shipping',\n\t\taddressTypeLabelBilling: 'billing',\n\t\t\n\t\tautocompleteDefaultOptions: {\n\t\t\tfields: [ 'address_components' ],\n\t\t\ttypes: [ 'address' ],\n\t\t},\n\t\t\n\t\t// Set component restrictions for each address lookup field.\n\t\t// Example of this accepted values: `allowedCountries: { shipping_address_1: ['US','UK'], }`\n\t\tallowedCountries: {},\n\t\tcountryNotAllowedMessageSelector: '.woocommerce-error.invalid-country-not-allowed',\n\t\tcountryNotAllowedMessageTemplate: '<span class=\"woocommerce-error invalid-country-not-allowed\">Country {country_name} is not allowed for {address_type} address.</span>',\n\t\tinvalidMessageClass: 'woocommerce-invalid',\n\t\tinvalidMessageCountryNotAllowedClass: 'woocommerce-invalid-country-not-allowed-field',\n\t\t\n\t\t// Keys based on component names from Google Place data\n\t\tcomponentValueType: {\n\t\t\tstreet_number: 'short_name',\n\t\t\troute: 'long_name',\n\t\t\tlocality: 'long_name',\n\t\t\tadministrative_area_level_1: 'short_name',\n\t\t\tadministrative_area_level_2: 'long_name',\n\t\t\tcountry: 'short_name',\n\t\t\tpostal_code: 'short_name',\n\t\t},\n\t\t\n\t\t// Keys based on WooCommerce forms field ids, values based on component names from Google Place data\n\t\t// Values for each locale defined at the server\n\t\t// @see `/inc/integration-google-address.php` at function `add_google_address_js_settings`\n\t\tlocaleComponents: {\n\t\t\tdefault: { // Default to US settings\n\t\t\t\tcountry_name: 'country_name',\n\t\t\t\tcountry: 'country',\n\t\t\t\tpostcode: 'postal_code',\n\t\t\t\tstate: 'administrative_area_level_1',\n\t\t\t\tcity: 'locality',\n\t\t\t\taddress_1: [ 'street_number', 'route' ],\n\t\t\t\tcomponents_separator: ' ',\n\t\t\t},\n\t\t},\n\n\t};\n\tvar _updateCheckout = true;\n\n\n\t/**\n\t * METHODS\n\t */\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n    };\n\n\n\n\t/**\n\t * Set address field value.\n\t *\n\t * @param   {HTMLElement}    field  Form field.\n\t * @param   {Object}         value  Value to set for the form field.\n\t */\n\tvar setFieldValue = function( field, value ) {\n\t\t// Bail if field not provided\n\t\tif ( ! field ) { return; }\n\t\t\n\t\t// Sanitize value\n\t\tvalue = value == undefined || value == null ? '' : value;\n\n\t\t// Set field value\n\t\tfield.value = value;\n\n\t\t// Set field value for select2 fields\n\t\tif ( _hasJQuery && field.matches( _settings.select2Selector ) ) {\n\t\t\t$( field ).val( value );\n\t\t\t$( field ).select2().trigger( 'change' );\n\t\t}\n\n\t\t// Clear validation status\n\t\tif ( window.CheckoutValidation ) {\n\t\t\tCheckoutValidation.clearValidationResults( field, field.closest( _settings.formRowSelector ) );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Remove the country not allowed validation message.\n\t * \n\t * @param   {HTMLElement}    groupElement  Element containing the address form field.\n\t */\n\tvar removeCountryNotAllowedMessage = function( groupElement ) {\n\t\t// Remove country not allowed error message\n\t\tvar countryNotAllowedMessage = groupElement.querySelector( _settings.countryNotAllowedMessageSelector );\n\n\t\tif ( countryNotAllowedMessage ) {\n\t\t\t// Add validation classes to form row\n\t\t\tvar formRow = countryNotAllowedMessage.closest( _settings.formRowSelector );\n\t\t\tformRow.classList.remove( _settings.invalidMessageClass );\n\t\t\tformRow.classList.remove( _settings.invalidMessageCountryNotAllowedClass );\n\t\t\t\n\t\t\t// Remove message element\n\t\t\tcountryNotAllowedMessage.parentNode.removeChild( countryNotAllowedMessage );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Display the country not allowed validation message.\n\t *\n\t * @param   {Object}        place   Google Place data.\n\t * @param   {HTMLElement}   input   Address lookup field element.\n\t */\n\tvar displayCountryNowAllowedMessage = function( place, input ) {\n\t\t// Get country long name\n\t\tvar countryName = getFieldLongNameFromPlace( 'country', place );\n\t\t\t\n\t\t// Get address type\n\t\tvar addressType = _settings.genericAddressType;\n\t\tif ( input.closest( _settings.addressGroupShippingSelector ) ) { addressType = _settings.addressTypeLabelShipping; }\n\t\tif ( input.closest( _settings.addressGroupBillingSelector ) ) { addressType = _settings.addressTypeLabelBilling; }\n\t\t\n\t\t// Get message html and append to page\n\t\tvar messageHtml = _settings.countryNotAllowedMessageTemplate;\n\t\tmessageHtml = messageHtml.replace( '{country_name}', countryName );\n\t\tmessageHtml = messageHtml.replace( '{address_type}', addressType );\n\t\tinput.insertAdjacentHTML( 'afterend', messageHtml );\n\n\t\t// Add validation classes to form row\n\t\tvar formRow = input.closest( _settings.formRowSelector );\n\t\tformRow.classList.add( _settings.invalidMessageClass );\n\t\tformRow.classList.add( _settings.invalidMessageCountryNotAllowedClass );\n\t}\n\n\n\n\t/**\n\t * Clear address form fields\n\t * \n\t * @param   {HTMLElement}    groupElement  Element containing the address form field.\n\t */\n\tvar cleanAddressFields = function( groupElement ) {\n\t\t// Bail if address book element not passed\n\t\tif ( ! groupElement ) { return; }\n\n\t\t_updateCheckout = false;\n\n\t\t// Iterate address form fields\n\t\tvar fields = groupElement.querySelectorAll( _settings.addressFieldsSelector );\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\n\t\t\tvar field = fields[i];\n\t\t\tsetFieldValue( field, '' );\n\t\t}\n\n\t\t// Remove country not allowed validation message\n\t\tremoveCountryNotAllowedMessage( groupElement );\n\t\t\n\t\t_updateCheckout = true;\n\t}\n\n\n\n\t/**\n\t * Get country locale settings for address fields from Google Place data.\n\t *\n\t * @param   {string}  countryCode  Country code to get locale settings for.\n\t *\n\t * @return  {Object}               Full locale settings for the country.\n\t */\n\tvar getLocale = function( countryCode ) {\n\t\tvar locale = _settings.localeComponents.default;\n\n\t\t// Get full locale settings for the country\n\t\tif ( countryCode != null && _settings.localeComponents.hasOwnProperty( countryCode.toUpperCase() ) ) {\n\t\t\tlocale = extend( locale, _settings.localeComponents[ countryCode.toUpperCase() ] );\n\t\t}\n\n\t\treturn locale;\n\t}\n\n\n\n\t/**\n\t * Get the value for an address field from the Google Place data based on the locale.\n\t *\n\t * @param   {string}  fieldId  Form field id to get data for.\n\t * @param   {Object}  place    Google Place data\n\t * @param\t{string}  locale   Country code of the locale.\n\t *\n\t * @return  {string}           Localized value for the form field.\n\t */\n\tvar getFieldValueFromPlace = function( fieldId, place, locale ) {\n\t\t\n\t\t// Bail if place does not have address components\n\t\tif ( ! place || ! place.address_components ) { return; }\n\n\t\tvar values = [];\n\t\t\n\t\t// Get default locale if not passed in\n\t\tif ( ! locale ) {\n\t\t\tlocale = _settings.localeComponents.default;\n\t\t}\n\t\t\n\t\t// Get `fieldComponents` as an Array\n\t\tvar fieldComponents = locale[ fieldId ];\n\t\tif ( ! Array.isArray( fieldComponents ) ) { fieldComponents = [ fieldComponents ]; }\n\t\t\n\t\tfieldComponents.forEach( function( fieldComponent ) {\n\t\t\tfor ( var i = 0; i < place.address_components.length; i++ ) {\n\t\t\t\tvar component = place.address_components[ i ];\n\t\t\t\tvar fieldType = component.types[0];\n\t\t\t\t\n\t\t\t\tif ( fieldComponent == fieldType ) {\n\t\t\t\t\tvar fieldValue = component[ _settings.componentValueType[ fieldType ] ];\n\t\t\t\t\tvalues.push( fieldValue );\n\t\t\t\t\tbreak; // Exit place address components iteration when value is found\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\t\n\t\treturn values.join( locale.components_separator );\n\t}\n\n\n\n\t/**\n\t * Get the `long_name` value for an address field from the Google Place data based on the locale.\n\t *\n\t * @param   {string}  fieldId  Form field id to get data for.\n\t * @param   {Object}  place    Google Place data\n\t * @param\t{string}  locale   Country code of the locale.\n\t *\n\t * @return  {string}           Localized value for the form field.\n\t */\n\tvar getFieldLongNameFromPlace = function( fieldId, place, locale ) {\n\t\t\n\t\t// Bail if place does not have address components\n\t\tif ( ! place || ! place.address_components ) { return; }\n\n\t\tvar values = [];\n\t\t\n\t\t// Get default locale if not passed in\n\t\tif ( ! locale ) {\n\t\t\tlocale = _settings.localeComponents.default;\n\t\t}\n\t\t\n\t\t// Get `fieldComponents` as an Array\n\t\tvar fieldComponents = locale[ fieldId ];\n\t\tif ( ! Array.isArray( fieldComponents ) ) { fieldComponents = [ fieldComponents ]; }\n\t\t\n\t\tfieldComponents.forEach( function( fieldComponent ) {\n\t\t\tfor ( var i = 0; i < place.address_components.length; i++ ) {\n\t\t\t\tvar component = place.address_components[ i ];\n\t\t\t\tvar fieldType = component.types[0];\n\t\t\t\t\n\t\t\t\tif ( fieldComponent == fieldType ) {\n\t\t\t\t\tvar fieldValue = component[ 'long_name' ];\n\t\t\t\t\tvalues.push( fieldValue );\n\t\t\t\t\tbreak; // Exit place address components iteration when value is found\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\t\n\t\treturn values.join( locale.components_separator );\n\t}\n\n\n\n\t/**\n\t * Get the allowed countries for an Address Autocomplete lookup field.\n\t *\n\t * @param   {HTMLElement}   input   Address lookup field element.\n\t *\n\t * @return  {Array}                 A list of countries allowed for the address lookup input field. `Null` on error getting the values.\n\t */\n\tvar getAllowedCountriesForInput = function( input ) {\n\t\t// Bail if input not valid or group element not available\n\t\tif ( ! input || ! input.closest( _settings.addressGroupSelector ) ) { return; }\n\t\t\n\t\tvar allowedCountries = [];\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\t\tvar countryField = groupElement.querySelector( '[id$=\"country\"]' );\n\t\t\n\t\t// Get allowed country codes from country select field\n\t\tif ( countryField.type != 'hidden' ) {\n\t\t\tvar countryOptions = groupElement.querySelectorAll( '[id$=\"country\"] option' );\n\t\t\tfor ( var i = 0; i < countryOptions.length; i++ ) {\n\t\t\t\tvar option = countryOptions[i];\n\t\t\t\tif ( option.value != '' ) { allowedCountries.push( option.value ); }\n\t\t\t}\n\t\t}\n\t\t// Handle only one allowed country\n\t\telse if ( countryField.value != '' ) {\n\t\t\tallowedCountries.push( countryField.value );\n\t\t}\n\n\t\treturn allowedCountries;\n\t}\n\n\n\n\t/**\n\t * Fill address form field values for a place from Google Place API.\n\t *\n\t * @param   {Object}                            place          Google Place data.\n\t * @param   {HTMLElement}                       input          Address lookup field element.\n\t * @param   {google.maps.places.Autocomplete}   autocomplete   Google Maps Autocomplete object.\n\t */\n\tvar fillAddressFields = function( place, input, autocomplete ) {\n\t\tvar groupElement = input.closest( _settings.addressGroupSelector );\n\t\t\n\t\t// Set country field\n\t\tvar countryValue = getFieldValueFromPlace( 'country', place );\n\t\tvar allowedCountries = getAllowedCountriesForInput( input );\n\t\t\n\t\t// Check if country is allowed, display validation message otherwise\n\t\tif ( ! allowedCountries.includes( countryValue ) ) {\n\t\t\tdisplayCountryNowAllowedMessage( place, input );\n\t\t\treturn;\n\t\t}\n\n\t\t// Clear previous address field values\n\t\tcleanAddressFields( groupElement );\n\n\t\t// Set address field values to the selected place\n\t\tvar locale = getLocale( countryValue );\n\t\tvar fieldIds = Object.getOwnPropertyNames( locale );\n\t\tfor ( var i = 0; i < fieldIds.length; i++ ) {\n\t\t\tvar fieldId = fieldIds[ i ];\n\t\t\t\n\t\t\t// Set field value\n\t\t\tvar value = getFieldValueFromPlace( fieldId, place, locale );\n\t\t\tvar field = groupElement.querySelector( '[id$=\"'+fieldId+'\"]' );\n\t\t\t\n\t\t\t// Set state field to uppercase to match values from WooCommerce\n\t\t\tif ( fieldId == 'state' && ( field.type.indexOf( 'select' ) > -1 )  ) { value = value.toUpperCase(); }\n\t\t\t\n\t\t\t// Skip country field if not a `select` field\n\t\t\tif ( fieldId == 'country' && field.type == 'hidden' ) { continue; }\n\n\t\t\tsetFieldValue( field, value );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Effectively disable the browser autocomplete feature by changing the input `autocomplete` attribute to a random value.\n\t *\n\t * @param   {HTMLElement}  input  Input field to disable the browser autocomplete feature.\n\t */\n\tvar disableBrowserAutocomplete = function( input ) {\n\t\t// Bail if input is invalid\n\t\tif ( ! input ) { return; }\n\n\t\tinput.setAttribute( 'autocomplete', 'off-' + Date.now() );\n\t}\n\n\t/**\n\t * Restore the browser autocomplete feature by changing the input `autocomplete` attribute to its original value.\n\t *\n\t * @param   {HTMLElement}  input  Input field to restore the browser autocomplete feature.\n\t */\n\tvar restoreAutocompleteAttr = function( input ) {\n\t\t// Bail if input is invalid\n\t\tif ( ! input ) { return; }\n\n\t\tinput.setAttribute( 'autocomplete', input.getAttribute( 'data-o-autocomplete' ) );\n\t}\n\n\t/**\n\t * Maybe restore the browser autocomplete feature.\n\t *\n\t * @param   {HTMLElement}  input  Input field to restore the browser autocomplete feature.\n\t */\n\tvar maybeRestoreAutocompleteAttr = function( input ) {\n\t\t// Bail if input is invalid of already restored\n\t\tif ( ! input || input.getAttribute( 'autocomplete' ) != 'off' ) { return; }\n\n\t\trestoreAutocompleteAttr( input );\n\t}\n\n\n\t/**\n\t * Prevent form submit when `Enter` key is pressed to select an address suggestion.\n\t *\n\t * @param   {Event}   e  Keydown event.\n\t *\n\t * @return  {Boolean}    Return `false` to prevent event to complete execution, nothing otherwise.\n\t */\n\tvar maybePreventFormSubmit = function( e ) {\n\t\t// Prevent form submit when `Enter` key is pressed to select an address suggestion\n\t\tif ( e.key == 'Enter' || e.which == 13 ) {\n\t\t\te.preventDefault();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for an address lookup field.\n\t *\n\t * @param   {HTMLElement}  input  Address lookup field element.\n\t */\n\tvar initField = function( input ) {\n\t\t// Bail if input invalid or already initialized\n\t\tif ( ! input || input.matches( _settings.autocompleteEnabledInputSelector ) ) { return; }\n\n\t\t// Get autocomplete options\n\t\tvar autocompleteOptions = extend( true, [], _settings.autocompleteDefaultOptions ); // Clone options object\n\t\tvar allowedCountriesList;\n\t\t\n\t\t// Try get allowed countries from settings\n\t\tif ( _settings.allowedCountries.hasOwnProperty( input.id ) ) {\n\t\t\tallowedCountriesList = _settings.allowedCountries[ input.id ];\n\t\t}\n\t\t// Try get/set allowed countries from country select field options\n\t\telse {\n\t\t\tallowedCountriesList = getAllowedCountriesForInput( input );\n\t\t\tif ( allowedCountriesList.length > 5 ) {\n\t\t\t\tallowedCountriesList = null;\n\t\t\t}\n\t\t}\n\n\t\t// Maybe set country restrictions\n\t\tif ( Array.isArray( allowedCountriesList ) ) {\n\t\t\tautocompleteOptions[ 'componentRestrictions' ] = { country: allowedCountriesList };\n\t\t}\n\t\t\n\t\t// Get/Set original value of the `autocomplete` attribute\n\t\tinput.setAttribute( 'data-o-autocomplete', input.getAttribute( 'autocomplete' ) );\n\n\t\t// Initialze Google Places Autocomplete\n\t\tvar autocomplete = new google.maps.places.Autocomplete( input, autocompleteOptions );\n\t\tvar onPlaceChange = function() {\n\t\t\tvar place = autocomplete.getPlace();\n\t\n\t\t\t// Check if user selected an address\n\t\t\tif ( place.address_components ) {\n\t\t\t\tfillAddressFields( place, input, autocomplete );\n\t\t\t}\n\t\t}\n\n\t\t// Set event handler for suggestion selected/changed\n\t\tautocomplete.addListener( 'place_changed', onPlaceChange );\n\n\t\t// Attempt to disable browser autocomplete for the input field.\n\t\t// This is a hacky way to restore autocomplete values after initializing the Google Places Autocomplete component,\n\t\t// a better approach would be to listen to an event from the API but at the time of making this the only event\n\t\t// available is `place_changed` which won't work for this purpoose\n\t\t// @see https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 1000 );\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 2000 );\n\t\twindow.setTimeout( function(){ maybeRestoreAutocompleteAttr( input ); }, 5000 );\n\t}\n\n\n\n\t/**\n\t * Initialize Google Address Autocomplete for all address lookup fields.\n\t */\n\tvar initFields = function() {\n\t\tvar inputs = document.querySelectorAll( _settings.autocompleteInputSelector );\n\t\tinputs.forEach( initField );\n\t}\n\n\n\n\t/**\n\t * Handle captured `focus` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Event dispatched. Usually `focus` or `focusin`.\n\t */\n\tvar handleFocus = function( e ) {\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\tdisableBrowserAutocomplete( e.target );\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * Handle captured `blur` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Event dispatched. Usually `blur` or `focusout`.\n\t */\n\tvar handleBlur = function( e ) {\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\trestoreAutocompleteAttr( e.target );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Handle captured `keydown` event and route to the appropriate functions.\n\t *\n\t * @param   {Event}  e  Keydown event dispatched.\n\t */\n\tvar handleKeydown = function( e ) {\n\t\t// Pressing `Enter`\n\t\tif ( e.target.matches( _settings.autocompleteEnabledInputSelector ) ) {\n\t\t\tmaybePreventFormSubmit( e );\n\t\t}\n\n\t\t// Clear country allowed message on address field change\n\t\tif ( e.target.matches( _settings.autocompleteInputSelector ) ) {\n\t\t\tvar groupElement = e.target.closest( _settings.addressGroupSelector );\n\t\t\tremoveCountryNotAllowedMessage( groupElement );\n\t\t}\n\t}\n\t\n\t\n\n\t/**\n\t * Initialize component and set related handlers.\n\t * \n\t * @param   {Object}   options  Pass different settings values for initializing this component.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Try to get options from the plugin settings JS object\n\t\tif ( ! options && window.wfcSettings && window.wfcSettings.googleAutoCompleteSettings ) {\n\t\t\toptions = window.wfcSettings.googleAutoCompleteSettings;\n\t\t}\n\n\t\t// Merge settings\n\t\t_settings = extend( true, _settings, options );\n\n\t\t// Initialize address autocomplete fields\n\t\tinitFields();\n\t\tif ( _hasJQuery ) {\n\t\t\t// Initialize address fields after `updated_checkout` to reinitialize\n\t\t\t// billing address complete field\n\t\t\t$( document.body ).on( 'updated_checkout', initFields );\n\t\t}\n\n\t\t// Add event listeners\n\t\twindow.addEventListener( 'focusin', handleFocus );\n\t\twindow.addEventListener( 'focusout', handleBlur );\n\t\twindow.addEventListener( 'keydown', handleKeydown, true );\n\t\t\t\n\t\t// Finish initialization\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\t\t_hasInitialized = true;\n\t};\n\n\n\t\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","GoogleAddressAutocomplete","global","this","window","setFieldValue","field","value","undefined","_hasJQuery","matches","_settings","select2Selector","$","val","select2","trigger","CheckoutValidation","clearValidationResults","closest","formRowSelector","removeCountryNotAllowedMessage","groupElement","countryNotAllowedMessage","querySelector","countryNotAllowedMessageSelector","formRow","classList","remove","invalidMessageClass","invalidMessageCountryNotAllowedClass","parentNode","removeChild","getFieldValueFromPlace","fieldId","place","locale","address_components","values","fieldComponents","localeComponents","default","Array","isArray","forEach","fieldComponent","i","length","component","fieldType","types","fieldValue","componentValueType","push","join","components_separator","getAllowedCountriesForInput","input","addressGroupSelector","allowedCountries","countryField","type","countryOptions","querySelectorAll","option","fillAddressFields","autocomplete","countryValue","includes","_updateCheckout","fields","addressFieldsSelector","cleanAddressFields","countryCode","hasOwnProperty","toUpperCase","extend","fieldIds","Object","getOwnPropertyNames","indexOf","countryName","getFieldLongNameFromPlace","addressType","genericAddressType","addressGroupShippingSelector","addressTypeLabelShipping","addressGroupBillingSelector","addressTypeLabelBilling","messageHtml","countryNotAllowedMessageTemplate","replace","insertAdjacentHTML","add","displayCountryNowAllowedMessage","restoreAutocompleteAttr","setAttribute","getAttribute","maybeRestoreAutocompleteAttr","initField","autocompleteOptions","allowedCountriesList","autocompleteEnabledInputSelector","autocompleteDefaultOptions","id","country","google","maps","places","Autocomplete","addListener","getPlace","setTimeout","initFields","document","autocompleteInputSelector","handleFocus","e","target","Date","now","handleBlur","handleKeydown","key","which","preventDefault","maybePreventFormSubmit","jQuery","_hasInitialized","_publicMethods","bodyClass","street_number","route","locality","administrative_area_level_1","administrative_area_level_2","postal_code","country_name","postcode","state","city","address_1","extended","deep","prototype","toString","call","arguments","obj","prop","merge","init","options","wfcSettings","googleAutoCompleteSettings","body","on","addEventListener"],"mappings":"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"}