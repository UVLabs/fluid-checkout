{"version":3,"sources":["checkout-validation.js"],"names":["$","is_always_validate","field","_alwaysValidateFieldsSelector","matches","get_form_row","closest","_formRowSelector","add_inline_message_markup","formRow","message","typeClass","referenceNode","is_select2_field","newReference","parentNode","querySelector","parent","element","document","createElement","className","innerText","insertBefore","nextSibling","init_inline_messages","form","_formSelector","fields","querySelectorAll","_validateFieldsSelector","i","length","needs_validation_message","is_required_field","_validationMessages","required","is_email_field","email","is_confirmation_field","confirmation","getAttribute","has_value","options","selectedIndex","value","needs_validation","validate_field","validationResults","offsetParent","push","_validationTypes","RegExp","test","confirmWith","validate_confirmation","valid","type","result","classList","remove","_invalidClass","add","_validClass","process_validation_results","handleValidateEvent","e","target","validate_all_fields","container","all_valid","init","window","fluidCheckoutValidationVars","serverSettings","validate_fields_selector","always_validate_fields_selector","required_field_message","email_field_message","confirmation_field_message","merge_settings_from_server","_hasJQuery","on","fluidCheckoutValidation","body","addEventListener","jQuery"],"mappings":"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","file":"../checkout-validation-109-dev-2.min.js","sourcesContent":["/**\n * Manage checkout front-end validation.\n *\n * DEPENDS ON:\n * - jQuery // Interact with WooCommerce events\n */\n\n(function( $ ){\n\n  'use strict';\n\n  /**\n   * VARIABLES\n   */\n  var _initClass                      = 'js-fluid-checkout-validation',\n      _hasJQuery                      = ( $ != null ),\n      _formSelector                   = 'form.checkout',\n      _formRowSelector                = '.form-row',\n      _validateFieldsSelector         = '.input-text, select',\n      _alwaysValidateFieldsSelector   = '',\n      _select2Selector                = '.select2, .select2-hidden-accessible',\n      _typeRequiredSelector           = '.validate-required',\n      _typeEmailSelector              = '.validate-email',\n      _typeConfirmationSelector       = '[data-confirm-with]',\n      _validClass                     = 'woocommerce-validated',\n      _invalidClass                   = 'woocommerce-invalid'\n      ;\n  var _validationTypes = {\n    required:         'required-field',\n    email:            'email',\n    confirmation:     'confirmation-field',\n  };\n  var _validationMessages = {\n    required:         'This is a required field.',\n    email:            'This is not a valid email address.',\n    confirmation:     'This field does not match the related',\n  };\n\n\n\n\t/**\n\t * METHODS\n\t */\n  \n\n\n  /**\n   * Check if field is hidden to the user.\n   * @param  {Field}  field Field to test visibility.\n   * @return {Boolean}      True if field is hidden to the user.\n   */\n  var is_field_hidden = function( field ) {\n    return ( field.offsetParent === null );\n  };\n\n\n\n  /**\n   * Check if field is in allow list for always validate.\n   * @param  {Field}  field  Field to test for allow list.\n   * @return {Boolean}       True if field is in allow list for always validate.\n   */\n  var is_always_validate = function( field ) {\n    // Bail if field not found or selector empty\n    if ( ! field || ! _alwaysValidateFieldsSelector ) { return false; }\n\n    // Check if field is in allow list\n    if ( field.matches( _alwaysValidateFieldsSelector ) ) { return true; }\n    return false;\n  };\n\n  \n\n  /**\n   * Get the form-row element related to the field.\n   * @param  {Field} field Form field.\n   * @return {Element}     Form row related to the passed field.\n   */\n  var get_form_row = function( field ) {\n    // Bail if field not valid\n    if ( !field ) { return; }\n\n    // TODO: Polyfill `closest`\n    return field.closest( _formRowSelector );\n  };\n\n\n\n  /**\n   * Add markup for inline message of required fields.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row related to the field.\n   * @param  {String} message   Message to add.\n   * @param  {String} typeClass Type of error used to identify which message to display on validation.\n   */\n  var add_inline_message_markup = function( field, formRow, message, typeClass ) {\n    // Bail if field not valid\n    if ( !field ) { return; }\n\n    var referenceNode = field;\n\n    // Change reference field for select2\n    if ( is_select2_field( field ) ) {\n      var newReference = field.parentNode.querySelector( '.select2-container' );\n      if ( newReference ) { referenceNode = newReference; }\n    }\n\n    // Create message element and add it after the field.\n    var parent = field.parentNode;\n    var element = document.createElement( 'span' );\n    element.className = 'woocommerce-error invalid-' + typeClass;\n    element.innerText = message;\n    parent.insertBefore( element, referenceNode.nextSibling );\n  };\n\n\n\n  /**\n   * Add markup for inline message of required fields.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row related to the field.\n   */\n  var init_inline_message_required = function( field, formRow ) {\n    var message = _validationMessages.required;\n    add_inline_message_markup( field, formRow, message, 'required-field' );\n  };\n\n\n\n  /**\n   * Add markup for inline message of email fields.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row related to the field.\n   */\n  var init_inline_message_email = function( field, formRow ) {\n    var message = _validationMessages.email;\n    add_inline_message_markup( field, formRow, message, 'email' );\n  };\n\n\n\n  /**\n   * Add markup for inline message of confirmation fields.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row related to the field.\n   */\n  var init_inline_message_confirmation = function( field, formRow ) {\n    var message = _validationMessages.confirmation;\n\n    // Try get message from field attributes\n    if ( field.getAttribute( 'data-invalid-confirm-with' ) ) {\n      message = field.getAttribute( 'data-invalid-confirm-with' );\n    }\n\n    add_inline_message_markup( field, formRow, message, 'confirmation-field' );\n  };\n\n\n\n   /**\n    * Initalize inline validation messages.\n    */\n  var init_inline_messages = function() {\n    var form = document.querySelector( _formSelector );\n\n    // Bail if form not found\n    if ( !form ) { return; }\n\n    var fields = form.querySelectorAll( _validateFieldsSelector );\n\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i],\n          formRow = get_form_row( field );\n\n      // Continue to next field if form row not found\n      if ( !formRow ) { continue; }\n\n      // Proceed if field needs validation\n      if ( needs_validation_message( field, formRow ) ) {\n        if ( is_required_field( formRow ) ) { init_inline_message_required( fields[i], formRow ); }\n        if ( is_email_field( formRow ) ) { init_inline_message_email( fields[i], formRow ); }\n        if ( is_confirmation_field( formRow ) ) { init_inline_message_confirmation( fields[i], formRow ); }\n      }\n    }\n  };\n\n  \n\n  /**\n   * Check field is a select2 element.\n   * @param  {Field}  field     Field to check.\n   * @return {Boolean}          True if field is select2.\n   */\n  var is_select2_field = function( field ) {\n    if ( field.closest( _select2Selector ) ) { return true; }\n    return false;\n  };\n\n\n\n  /**\n   * Check if field is a select field.\n   * @param  {Element}  field  Field to check.\n   * @return {Boolean}         True if is a select field.\n   */\n  var is_select_field = function( field ) {\n    if ( field.matches( 'select' ) ) { return true; }\n    return false;\n  };\n\n\n\n  /**\n   * Check if field has value.\n   * @param  {Field}   field  Field to check.\n   * @return {Boolean}        True if field has value.\n   */\n  var has_value = function( field ) {\n    // Check for select 2 field\n    if ( is_select_field( field ) ) {\n      if ( field.options && field.selectedIndex > -1 && field.options[ field.selectedIndex ].value != '' ) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n\n    // Check for all other fields\n    if ( field.value != '' ) { return true; }\n    \n    return false;\n  };\n\n\n\n  /**\n   * Check if form row is required.\n   * @param  {Element}  formRow Form row element.\n   * @return {Boolean}          True if required.\n   */\n  var is_required_field = function( formRow ) {\n    // TODO: Polyfill `matches`\n    if ( formRow.matches( _typeRequiredSelector ) ) { return true; }\n    return false;\n  };\n\n\n\n  /**\n   * Validate required field.\n   * @param  {Field} field Field for validation.\n   */\n  var validate_required = function( field, formRow ) {\n    // Bail if has value\n    if ( has_value( field ) ) { return [ 'required', true ]; }\n\n    // Return classes for invalid field\n    return [ 'required', _validationTypes.required ];\n  };\n\n\n\n  /**\n   * Check if form row is email field.\n   * @param  {Element}  formRow Form row element.\n   * @return {Boolean}          True if is email field.\n   */\n  var is_email_field = function( formRow ) {\n    // TODO: Polyfill `matches`\n    if ( formRow.matches( _typeEmailSelector ) ) { return true; }\n    return false;\n  };\n\n\n\n  /**\n   * Validate email field.\n   * @param  {Field} field Field for validation.\n   */\n  var validate_email = function( field, formRow ) {\n    // Bail if does not have value\n    if ( ! has_value( field ) ) { return [ 'email', true ]; }\n\n    /* https://stackoverflow.com/questions/2855865/jquery-validate-e-mail-address-regex */\n    var emailPattern = new RegExp(/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i);\n\n    // Validate email value\n    if ( emailPattern.test( field.value ) ) { return [ 'email', true ]; }\n\n    // Return classes for invalid field\n    return [ 'email', _validationTypes.email ];\n  };\n\n\n\n  /**\n   * Check if form row is a confirmation field.\n   * @param  {Element}  formRow Form row element.\n   * @return {Boolean}          True if is a confimation field.\n   */\n  var is_confirmation_field = function( formRow ) {\n    // TODO: Polyfill `matches`\n    if ( formRow.querySelector( _typeConfirmationSelector ) ) { return true; }\n    return false;\n  };\n\n\n\n  /**\n   * Validate confirmation field.\n   * @param  {Field} field Field for validation.\n   */\n  var validate_confirmation = function( field, formRow ) {\n    // Bail if does not have value\n    if ( ! has_value( field ) ) { return [ 'confirmation', true ]; }\n\n    // Get confirmation field\n    var form = formRow.closest( 'form' );\n    var confirmWith = form ? form.querySelector( field.getAttribute( 'data-confirm-with' ) ) : null;\n\n    // Validate fields have same value\n    if ( confirmWith && field.value == confirmWith.value ) { return [ 'confirmation', true ]; }\n\n    // Return classes for invalid field\n    return [ 'confirmation', _validationTypes.confirmation ];\n  };\n\n\n\n  /**\n   * Check if field needs validation.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row for validation.\n   * @return {Boolean}          True if field needs any validation.\n   */\n  var needs_validation = function( field, formRow ) {\n    // Bail if field should always validate\n    if ( is_always_validate( field ) ) { return true; }\n\n    // Test validation types\n    if ( is_required_field( formRow ) ) { return true; }\n    if ( is_email_field( formRow ) ) { return true; }\n    if ( is_confirmation_field( formRow ) ) { return true; }\n\n    return false;\n  };\n\n\n\n  /**\n   * Check if field needs validation message markup.\n   * @param  {Field} field      Field to validate.\n   * @param  {Element} formRow  Form row for validation.\n   * @return {Boolean}          True if field needs any validation.\n   */\n  var needs_validation_message = function( field, formRow ) {\n    // Check existence of message markup\n    if ( formRow.querySelector( '.woocommerce-error' ) ) { return false; }\n\n    // Check if field needs validation\n    if ( ! needs_validation( field, formRow ) ) { return false; }\n    \n    return true;\n  };\n\n\n\n  /**\n   * Process validation results of one field.\n   * @param  {Field} field             Field to validation.\n   * @param  {Element} formRow          Form row element.\n   * @param  {Array} validationResults Validation results array.\n   * @return {Boolean}           True if all fields are valid.\n   */\n  var process_validation_results = function( field, formRow, validationResults ) {\n    var valid = true;\n\n    // Iterate validation results\n    for ( var i = 0; i < validationResults.length; i++ ) {\n      var type    = validationResults[i][0],\n          result  = validationResults[i][1];\n\n      // Remove invalidation classes from the field\n      if ( true === result ) {\n        // Remove invalid classes for validation type\n        formRow.classList.remove( _invalidClass +'-'+ _validationTypes[ type ] );\n      }\n      // Add invalidation classes to the field\n      else {\n        valid = false;\n        formRow.classList.add( _invalidClass +'-'+ result );\n      }\n    }\n\n    if ( valid ) {\n      // Add validation classes\n      formRow.classList.add( _validClass );\n      formRow.classList.remove( _invalidClass );\n    }\n    else {\n      // Add invalidaton classes\n      formRow.classList.remove( _validClass );\n      formRow.classList.add( _invalidClass );\n    }\n\n    return valid;\n  };\n\n\n\n  /**\n   * Test multiple validations on the passed field.\n   * @param  {Field} field    Field for validation.\n   * @return {Boolean}        True if field is valid.\n   */\n  var validate_field = function( field ) {\n    // Bail if field is null\n    if ( ! field ) { return true; }\n\n    var validationResults = [],\n        formRow = get_form_row( field );\n\n    // Bail if formRow not found\n    if ( ! formRow ) { return true; }\n\n    // Bail if hidden to the user\n    if ( ! is_always_validate( field ) && is_field_hidden( field ) ) { return true; }\n\n    // Bail if field doesn't need validation\n    if ( ! needs_validation( field, formRow ) ) { return true; }\n\n    // Perform validations\n    if ( is_required_field( formRow ) ) { validationResults.push( validate_required( field, formRow ) ); }\n    if ( is_email_field( formRow ) ) { validationResults.push( validate_email( field, formRow ) ); }\n    if ( is_confirmation_field( formRow ) ) { validationResults.push( validate_confirmation( field, formRow ) ); }\n\n    // TODO: Trigger validation of related fields (ie zip > State, Country)\n\n    // Process results\n    return process_validation_results( field, formRow, validationResults );\n  };\n\n\n  \n  /**\n   * Handle document clicks and route to the appropriate function.\n   */\n  var handleValidateEvent = function( e ) {\n    var field = e.target;\n\n    // Get correct field when is select2\n    if ( is_select2_field( e.target ) ) {\n      field = e.target.closest( _formRowSelector ).querySelector( 'select' );\n    }\n\n    validate_field( field );\n  };\n\n\n\n  /**\n   * Trigger validation in all fields inside the container.\n   * @param  {Element} container Element to look for fields in, if not passed consider the checkout form as container.\n   * @return {Boolean}           True if all fields are valid.\n   */\n  var validate_all_fields = function( container ) {\n    // Default container to the form\n    if ( ! container ) { container = document.querySelector( _formSelector ) }\n\n    var all_valid = true;\n    var fields = container.querySelectorAll( _validateFieldsSelector );\n\n    for (var i = 0; i < fields.length; i++) {\n      if ( ! validate_field( fields[i] ) ) {\n        all_valid = false;\n      }\n    }\n\n    return all_valid;\n  };\n\n\n\n  var merge_settings_from_server = function() {\n    // Get settings from server side\n    if ( window.fluidCheckoutValidationVars ) {\n      var serverSettings = window.fluidCheckoutValidationVars;\n      \n      if ( serverSettings.validate_fields_selector ) { _validateFieldsSelector = serverSettings.validate_fields_selector; }\n      if ( serverSettings.always_validate_fields_selector ) { _alwaysValidateFieldsSelector = serverSettings.always_validate_fields_selector; }\n\n      if ( serverSettings.required_field_message ) { _validationMessages.required = serverSettings.required_field_message; }\n      if ( serverSettings.email_field_message ) { _validationMessages.email = serverSettings.email_field_message; }\n      if ( serverSettings.confirmation_field_message ) { _validationMessages.confirmation = serverSettings.confirmation_field_message; }\n    }\n  }\n\n\n  /**\n   * Initialize component and set related handlers.\n   */\n  var init = function() {\n    merge_settings_from_server();\n\n    if ( _hasJQuery ) {\n      $( _formSelector ).on( 'input validate change', _validateFieldsSelector, handleValidateEvent );\n    }\n\n    init_inline_messages();\n\n    // Expose members\n    window.fluidCheckoutValidation = {\n      validate_all_fields: validate_all_fields,\n    };\n\n    // Add init class\n    document.body.classList.add( _initClass );\n  };\n\n\n\n  // Add event listeners\n  window.addEventListener( 'load', init );\n\n  // Run on checkout or cart changes\n  $(document).on( 'load_ajax_content_done', init );\n  $(document).on( 'updated_checkout', init_inline_messages );\n\n})( jQuery );\n"]}